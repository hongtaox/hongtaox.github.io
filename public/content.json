[{"title":"linux添加定时任务","date":"2017-10-29T16:00:00.000Z","path":"2017/10/30/2017-10-30.在linux添加定时任务/","text":"linux添加定时任务1234567891011#!/bin/bash BASEDIR=`dirname $0`/..BASEDIR=`(cd &quot;$BASEDIR&quot;; pwd)`PROGRAM=$BASEDIR/t.shCRONTAB_CMD=&quot;*/1 * * * * sh $PROGRAM once &gt; /dev/null 2&gt;&amp;1 &amp;&quot;(crontab -l 2&gt;/dev/null | grep -Fv $PROGRAM; echo &quot;$CRONTAB_CMD&quot;) | crontab -COUNT=`crontab -l | grep $PROGRAM | grep -v &quot;grep&quot;|wc -l `if [ $COUNT -lt 1 ]; then echo &quot;fail to add crontab $PROGRAM&quot; exit 1fi #删除定时任务12sed -i &apos;/t.sh/d&apos; /var/spool/cron/rootsed -i &apos;/^$/d&apos; /var/spool/cron/root","tags":[{"name":"crontable","slug":"crontable","permalink":"http://yoursite.com/tags/crontable/"}]},{"title":"linux下查找大文件","date":"2017-10-24T16:00:00.000Z","path":"2017/10/25/2017-10-26.在linux查看安装包/","text":"linux下查找安装软件因为linux安装软件的方式比较多，所以没有一个通用的办法能查到某些软件是否安装了。总结起来就是这样几类： 1、rpm包安装的，可以用rpm -qa看到，如果要查找某软件包是否安装，用 rpm -qa | grep “软件或者包的名字”。 [root@hexuweb102 ~] rpm -qa | grep ruby 2、以deb包安装的，可以用dpkg -l能看到。如果是查找指定软件包，用dpkg -l | grep “软件或者包的名字”； [root@hexuweb102 ~] dpkg -l | grep ruby 3、yum方法安装的，可以用yum list installed查找，如果是查找指定包，命令后加 | grep “软件名或者包名”； [root@hexuweb102 ~] yum list installed | grep ruby 4、如果是以源码包自己编译安装的，例如.tar.gz或者tar.bz2形式的，这个只能看可执行文件是否存在了， 上面两种方法都看不到这种源码形式安装的包。如果是以root用户安装的，可执行程序通常都在/sbin:/usr/bin目录下。 说明： 其中rpm yum Redhat系linux的软件包管理命令，dpkg debian系列的软件包管理命令","tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"}]},{"title":"在linux下如何将文件夹打包","date":"2017-10-24T16:00:00.000Z","path":"2017/10/25/2017-10-25.在linux下如何将文件夹打包/","text":"在linux下如何将文件夹打包linux zip压缩。压缩当前文件夹下所有文件，压缩为a.zip。命令行的方法是怎样。zip -r fileName.zip 文件夹名 tar tar命令可以用来压缩打包单文件、多个文件、单个目录、多个目录。 常用格式： 单个文件压缩打包 tar czvf my.tar file1 多个文件压缩打包 tar czvf my.tar file1 file2,… 单个目录压缩打包 tar czvf my.tar dir1 多个目录压缩打包 tar czvf my.tar dir1 dir2 解包至当前目录：tar xzvf my.tar cpio 含子目录find x* | cpio -o &gt; /y/z.cpio 不含子目录ls x* | cpio -o &gt; /y/z.cpio 解包： cpio -i &lt; /y/z.cpio [root@linux ~]# tar [-cxtzjvfpPN] 文件与目录 ….参数：-c ：建立一个压缩文件的参数指令(create 的意思)；-x ：解开一个压缩文件的参数指令！-t ：查看 tarfile 里面的文件！特别注意，在参数的下达中， c/x/t 仅能存在一个！不可同时存在！因为不可能同时压缩与解压缩。-z ：是否同时具有 gzip 的属性？亦即是否需要用 gzip 压缩？-j ：是否同时具有 bzip2 的属性？亦即是否需要用 bzip2 压缩？-v ：压缩的过程中显示文件！这个常用，但不建议用在背景执行过程！-f ：使用档名，请留意，在 f 之后要立即接档名喔！不要再加参数！ 例如使用『 tar -zcvfP tfile sfile』就是错误的写法，要写成 『 tar -zcvPf tfile sfile』才对喔！-p ：使用原文件的原来属性（属性不会依据使用者而变）-P ：可以使用绝对路径来压缩！-N ：比后面接的日期(yyyy/mm/dd)还要新的才会被打包进新建的文件中！–exclude FILE：在压缩的过程中，不要将 FILE 打包！范例：范例一：将整个 /etc 目录下的文件全部打包成为 /tmp/etc.tar[root@linux ~]# tar -cvf /tmp/etc.tar /etc &lt;==仅打包，不压缩！[root@linux ~]# tar -zcvf /tmp/etc.tar.gz /etc &lt;==打包后，以 gzip 压缩[root@linux ~]# tar -jcvf /tmp/etc.tar.bz2 /etc &lt;==打包后，以 bzip2 压缩 特别注意，在参数 f 之后的文件档名是自己取的，我们习惯上都用 .tar 来作为辨识。如果加 z 参数，则以 .tar.gz 或 .tgz 来代表 gzip 压缩过的 tar file ～如果加 j 参数，则以 .tar.bz2 来作为附档名啊～上述指令在执行的时候，会显示一个警告讯息：『tar: Removing leading `/‘ from member names』那是关於绝对路径的特殊设定。范例二：查阅上述 /tmp/etc.tar.gz 文件内有哪些文件？[root@linux ~]# tar -ztvf /tmp/etc.tar.gz 由於我们使用 gzip 压缩，所以要查阅该 tar file 内的文件时，就得要加上 z 这个参数了！这很重要的！范例三：将 /tmp/etc.tar.gz 文件解压缩在 /usr/local/src 底下[root@linux ~]# cd /usr/local/src[root@linux src]# tar -zxvf /tmp/etc.tar.gz 在预设的情况下，我们可以将压缩档在任何地方解开的！以这个范例来说，我先将工作目录变换到 /usr/local/src 底下，并且解开 /tmp/etc.tar.gz ，则解开的目录会在 /usr/local/src/etc 呢！另外，如果您进入 /usr/local/src/etc则会发现，该目录下的文件属性与 /etc/ 可能会有所不同喔！范例四：在 /tmp 底下，我只想要将 /tmp/etc.tar.gz 内的 etc/passwd 解开而已[root@linux ~]# cd /tmp[root@linux tmp]# tar -zxvf /tmp/etc.tar.gz etc/passwd 我可以透过 tar -ztvf 来查阅 tarfile 内的文件名称，如果单只要一个文件，就可以透过这个方式来下达！注意到！ etc.tar.gz 内的根目录 / 是被拿掉了！范例五：将 /etc/ 内的所有文件备份下来，并且保存其权限！[root@linux ~]# tar -zxvpf /tmp/etc.tar.gz /etc 这个 -p 的属性是很重要的，尤其是当您要保留原本文件的属性时！范例六：在 /home 当中，比 2005/06/01 新的文件才备份[root@linux ~]# tar -N ‘2005/06/01’ -zcvf home.tar.gz /home 范例七：我要备份 /home, /etc ，但不要 /home/dmtsai[root@linux ~]# tar –exclude /home/dmtsai -zcvf myfile.tar.gz /home/* /etc 范例八：将 /etc/ 打包后直接解开在 /tmp 底下，而不产生文件！[root@linux ~]# cd /tmp[root@linux tmp]# tar -cvf - /etc | tar -xvf - 这个动作有点像是 cp -r /etc /tmp 啦～依旧是有其有用途的！要注意的地方在於输出档变成 - 而输入档也变成 - ，又有一个 | 存在～这分别代表 standard output, standard input 与管线命令啦！这部分我们会在 Bash shell 时，再次提到这个指令跟大家再解释啰！","tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"zip","slug":"zip","permalink":"http://yoursite.com/tags/zip/"},{"name":"tar","slug":"tar","permalink":"http://yoursite.com/tags/tar/"}]},{"title":"在linux ntp 时间同步","date":"2017-10-24T16:00:00.000Z","path":"2017/10/25/2017-10-25.linux ntp 同步时间/","text":"一、搭建时间同步服务器1、编译安装ntp serverrpm -qa | grep ntp若没有找到，则说明没有安装ntp包，从光盘上找到ntp包，使用rpm -Uvh ntp.rpm进行安装2、修改ntp.conf配置文件vi /etc/ntp.conf①、第一种配置：允许任何IP的客户机都可以进行时间同步将“restrict default nomodify notrap noquery”这行修改成：restrict default nomodify notrap配置文件示例：/etc/ntp.conf②、第二种配置：只允许192.168.211.网段的客户机进行时间同步在restrict default nomodify notrap noquery（表示默认拒绝所有IP的时间同步）之后增加一行：restrict 192.168.211.0 mask 255.255.255.0 nomodify notrap3、启动ntp服务service ntpd start开机启动服务chkconfig ntpd on4、ntpd启动后，客户机要等几分钟再与其进行时间同步，否则会提示“no server suitable for synchronization found”错误。 二、配置时间同步客户机手工执行 ntpdate 来同步或者利用crontab来执行crontab -e0 21 * ntpdate 192.168.211.22 &gt;&gt; /root/ntpdate.log 2&gt;&amp;1每天晚上9点进行同步附：当用ntpdate -d 来查询时会发现导致 no server suitable for synchronization found 的错误的信息有以下2个：错误1.Server dropped: Strata too high在ntp客户端运行ntpdate serverIP，出现no server suitable for synchronization found的错误。在ntp客户端用ntpdate –d serverIP查看，发现有“Server dropped: strata too high”的错误，并且显示“stratum 16”。而正常情况下stratum这个值得范围是“0~15”。这是因为NTP server还没有和其自身或者它的server同步上。以下的定义是让NTP Server和其自身保持同步，如果在/ntp.conf中定义的server都不可用时，将使用local时间作为ntp服务提供给ntp客户端。server 127.127.1.0fudge 127.127.1.0 stratum 8 在ntp server上重新启动ntp服务后，ntp server自身或者与其server的同步的需要一个时间段，这个过程可能是5分钟，在这个时间之内在客户端运行ntpdate命令时会产生no server suitable for synchronization found的错误。那么如何知道何时ntp server完成了和自身同步的过程呢？在ntp server上使用命令： watch ntpq -p出现画面：Every 2.0s: ntpq -p Thu Jul 10 02:28:32 2008 remote refid st t when poll reach delay offset jitter ==============================================================================192.168.30.22 LOCAL(0) 8 u 22 64 1 2.113 179133. 0.001LOCAL(0) LOCAL(0) 10 l 21 64 1 0.000 0.000 0.001注意LOCAL的这个就是与自身同步的ntp server。注意reach这个值，在启动ntp server服务后，这个值就从0开始不断增加，当增加到17的时候，从0到17是5次的变更，每一次是poll的值的秒数，是64秒*5=320秒的时间。如果之后从ntp客户端同步ntp server还失败的话，用ntpdate –d来查询详细错误信息，再做判断。错误2.Server dropped: no data从客户端执行netdate –d时有错误信息如下：transmit(192.168.30.22) transmit(192.168.30.22)transmit(192.168.30.22)transmit(192.168.30.22)transmit(192.168.30.22)192.168.30.22: Server dropped: no dataserver 192.168.30.22, port 123…..28 Jul 17:42:24 ntpdate[14148]: no server suitable for synchronization found出现这个问题的原因可能有2：1。检查ntp的版本，如果你使用的是ntp4.2（包括4.2）之后的版本，在restrict的定义中使用了notrust的话，会导致以上错误。使用以下命令检查ntp的版本： ntpq -c version下面是来自ntp官方网站的说明：The behavior of notrust changed between versions 4.1 and 4.2.In 4.1 (and earlier) notrust meant “Don’t trust this host/subnet for time”.In 4.2 (and later) notrust means “Ignore all NTP packets that are not cryptographically authenticated.” This forces remote time servers to authenticate themselves to your (client) ntpd解决：把notrust去掉。2。检查ntp server的防火墙。可能是server的防火墙屏蔽了upd 123端口。可以用命令 #service iptables stop 来关掉iptables服务后再尝试从ntp客户端的同步，如果成功，证明是防火墙的问题，需要更改iptables的设置。","tags":[{"name":"ntp","slug":"ntp","permalink":"http://yoursite.com/tags/ntp/"}]},{"title":"linux下查找大文件","date":"2017-10-24T16:00:00.000Z","path":"2017/10/25/2017-10-26.在linux下查找大文件/","text":"linux下查找大文件1.查找大文件： find . -type f -size +100M #查找100M以上的文件 对查找结果按照文件大小做一个排序 find . -type f -size +100M -print0 | xargs -0 du -h | sort -nr 2.查找当前目录下前20的大目录 sudo du -hm –max-depth=2 | sort -nr | head -20 LINUX的磁盘管理du命令详解 du(disk usage)命令可以计算文件或目录所占的磁盘空间。没有指定任何选项时，它会测量当前工作目录与其所有子目录，分别显示各个目录所占的快数，最后才显示工作目录所占总快数。命令用途du(disk usage)命令可以计算文件或目录所占的磁盘空间。没有指定任何选项时，它会测量当前工作目录与其所有子目录，分别显示各个目录所占的快数，最后才显示工作目录所占总快数。 命令格式 du [OPTION]… [FILE]…-a, –all 包括了所有的文件，而不只是目录–apparent-size print apparent sizes, rather than disk usage; although the apparent size is usually smaller, it may be larger due to holes in (’sparse’) files, internal fragmentation, indirect blocks, and the like-B, –block-size=SIZE use SIZE-byte blocks-b, –bytes 以字节为计算单位-k 以千字节（KB）为计算单位-m 以兆字节（M）为计算单位-c, –total 最后加上一个总计（系统缺省）-D, –dereference-args dereference FILEs that are symbolic links-H 跟 –si效果一样。-h, –human-readable 以比较阅读的方式输出文件大小信息 (例如，1K 234M 2G)。注：该选项在很多其他命令（df, ls）中也有效。–si 跟-h 效果一样，只是以1000为换算单位-l, –count-links 计算所有的文件大小，对硬链接文件，则计算多次。-L, –dereference 显示选项中所指定符号连接的源文件大小。-P, –no-dereference 不跟随任何的符号连接（缺省）-S, –separate-dirs 计算目录所占空间时不包括子目录的大小。-s, –summarize 只显示工作目录所占总空间-x, –one-file-system 以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。-X FILE, –exclude-from=FILE 排除掉指定的FILE–exclude=PATTERN 排除掉符合样式的文件,Pattern就是普通的Shell样式，？表示任何一个字符，*表示任意多个字符。–max-depth=N 只列出深度小于max-depth的目录和文件的信息 –max-depth=0 的时候效果跟–s是 一样 使用案例 root@ubuntu:/# cd /home/web/root@ubuntu:/home/web# du -s793832 .–不指定FILE名字计算出当前目录所占用的空间大小。root@ubuntu:/#$ du -sh776M .–不指定FILE名字计算出当前目录所占用的空间大小。-h选项使得输出结果跟容易阅读（跟上例比较）root@ubuntu:/#$ du –max-depth=1 -h–输出当前目录下各个子目录所使用的空间83M ./java87M ./build197M ./jboss128M ./lib1.1M ./bin52K ./synclogs4.8M ./sql920K ./conf52K ./logs20K ./mail_group56K ./.svn144M ./htdocs56K ./jboss-conf2.7M ./auto-conf8.0K ./.mule23M ./classes43M ./templates144K ./project776M . 找出大文件磁盘空间被耗尽的时候，免不了要清理一下，比如说/home目录太大，就可以使用下面命令看看到底是谁： du -s /home/* | sort -nr linux磁盘空间不足怎么办，磁盘清理方法 由于当初安装系统设计不合理，有些分区的过小，以及网络通讯故障等造成日志文件速度增长等其他原因都可以表现为磁盘空间满，造成无法读写磁盘，应用程序无法执行等。下面就给你支几招（以/home空间满为例）： 定期对重要文件系统扫描，并作对比，分析那些文件经常读写 #IS-IR/home&gt;;files.txt #diff filesold.txt files.txt 通过分析预测空间的增长情况，同时可以考虑对不经常读写文件进行压缩，以减少占用空间。 查看空间文件系统的inodes消耗 #df-i/home 如果还有大量的inpde可用，说明大文件占用空间，否贼可能大量小文件占用空间。 找出占用空间较大的目录查看/home占用的空间 #du-hs/home1查看/home下占用空间超过1000m #du/awk’$1&gt;;2000’ 找出占用空间较大的文件 #find/home-size +2000K 找出最近修改或创建的文件先TOUCH一个你想要的时间的文件如下 #TOUCH-t 08190800 test #find/home-newer test-print 删除日志 #rm-rf/var/log/* 对分区做连接在有空间的分区，对没有空进分区做连接 #in-s/home/use/home 找出耗费大量的空间的进程根据不同的应用，找出对应的进程，分析原因。 检查并修复文件系统 #fsck-y/home1重启机器有了以上的十招，应该可以解决大部分问题，但是关键还是安装时要规划好分区。另外发现磁盘蛮时，不能急，小心操作，认真分析原因，然后小心应对。需要注 意，以上十招不需要顺序执行，有的可能一招封喉，有的可能需要数招并用，删除操作一定要小心。如果还不行，只有采取增加硬盘，重新安装系统等“硬”办法了 还可以： cd/du-h–max-depth=q/grep M/sort-n 找到最大的那个目录后进入该目录 再运行du-h-max-depth=1/grep M /sort-n 找出来以后看是否有用的文件 没用就删掉","tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"}]},{"title":"不朽的失眠","date":"2017-09-26T16:00:00.000Z","path":"2017/09/27/2017-09-27.不朽的失眠/","text":"不朽的失眠 ——[中国·台湾] 张晓风&nbsp;&nbsp;&nbsp;&nbsp;他落榜了！&nbsp;&nbsp;&nbsp;&nbsp;一千二百年前。长安城的大街上。榜纸那么大那么长，然而，就是没有他的名字。啊！竟单单容不下他的名字“张继”那两个字。考中的人，姓名一笔一划地写在榜单上，天下皆知。奇怪的是，在他的感觉里，考不上，才更是天下皆知，这件事，令他羞惭沮丧。离开京城吧！议好了价，他踏上小舟。本来预期的情节不是这样的，本来也许有插花游街、马蹄轻疾的风流，有衣锦还乡袍笏加身的荣耀。然而，寒窗十年，虽有他的悬梁刺股，琼林宴上，却并没有他的一角席次。船行似风。江枫如火，在岸上举着冷冷的爝焰。这天黄昏，船，来到苏州。但，这美丽的古城，对张继而言，也无非是另一个触动愁情的地方。如果说白天有什么该做的事，对一个读书人而言，就是读书吧！夜晚呢？夜晚该睡觉以便养足精神第二天再读。然而，今夜是一个忧伤的夜晚。今夜，在异乡，在江畔，在秋冷雁高的季节，容许一个落魄的士子放肆他的忧伤。江水，可以无限度地收纳古往今来一切不顺遂之人的泪水。这样的夜晚，残酷地坐着，亲自听自己的心正被什么东西啮食而一分一分消失的声音。并且眼睁睁地看着自己的生命如同劲风中的残灯，所有的力气都花在抗拒上，油快尽了，微火每一刹那都可能熄灭。然而，可恨的是，终其一生，它都不曾华美灿烂过啊！江水睡了，船睡了，船家睡了，岸上的人也睡了，惟有他，张继，醒着，夜愈深，愈清醒，清醒如败叶落余的枯树，似梁燕飞去的空巢。起先，是睡眠排拒了他。（也罢，这半生，不是处处都遭排拒吗？）而后，是他在赌气，好，无眠就无眠，长夜独醒，就干脆彻底来为自己验伤，有何不可？月亮西斜了，一副意兴阑珊的样子。有鸟啼，粗嘎嘶哑，是乌鸦。那月亮被它一声声叫得更黯淡了。江岸上，想已霜结千草。夜空里，星子亦如清霜，一粒粒零落凄绝。在须角在眉梢，他感觉，似乎也森然生凉，那阴阴不怀好意的凉气啊，正等待凝成早秋的霜花，来点缀他惨淡少年的容颜。江上渔火二三，他们在干什么？在捕鱼吧？或者，虾？他们也会有撒空网的时候吗？世路艰辛啊！即使潇洒的捕鱼人，也不免投身在风波里吧？然而，能辛苦工作，也是一项幸福吧！今夜，月自光其光，霜自冷其冷，安心的人在安眠，工作的人去工作。只有我张继，是天不管地不收的一个，是既没有权利去工作，也没有福气去睡眠的一个……钟声响了，这奇怪的深夜的寒山寺钟声。一般寺庙，都是暮鼓晨钟，偏偏寒山寺庙敲“夜半钟”，用以惊世。钟声贴着水面传来，在别人，那声音只是睡梦中模糊的衬底的音乐；在他，却一记一记都撞击在心坎上，正中要害。终生那么美丽，但钟自己到底是痛还是不痛呢？既然失眠，他推枕而起，写点什么吧，写点什么来发泄胸中的郁愤，写点什么来倾吐心中的不平。运笔如刀，吐字如箭，我要荡平人世的幽险，我要穿透时空的凝滞：天意君须会，人间要好诗！于是张继摸黑写下“枫桥夜泊”四字。然后，然后就把其余二十八字抄了下来。我说“照抄”，是因为那二十八个字在他心底已像白墙上的黑字一样分明凸显：&nbsp;&nbsp;&nbsp;&nbsp;月落乌啼霜满天，&nbsp;&nbsp;&nbsp;&nbsp;江枫渔火对愁眠。&nbsp;&nbsp;&nbsp;&nbsp;姑苏城外寒山寺，&nbsp;&nbsp;&nbsp;&nbsp;夜半钟声到客船。感谢上苍，如果没有落第的张继，诗的历史上便少了一首好诗，我们的某一种心情，就没有人来为我们一语道破。一千二百年过去了，那张长长的榜单上（就是张继拼命挤也挤不进去的那纸金榜）曾经出现过的状元是谁？哈！谁管他是谁呀？真正被记得的名字是“落第者张继”。有人会记得那一届状元披红挂绿骑马游街的盛景吗？不！我们只记得秋夜的客船上那名落第的举子，那个失意的文人，张继，以及他那场不朽的失眠。","tags":[{"name":"散文","slug":"散文","permalink":"http://yoursite.com/tags/散文/"}]},{"title":"Spark RPC通信层分析","date":"2016-12-29T16:00:00.000Z","path":"2016/12/30/2016-12-30.Spark RPC通信层分析/","text":"Spark将RPC通信层设计的非常巧妙，融合了各种设计/架构模式，将一个分布式集群系统的通信层细节完全屏蔽，这样在上层的计算框架的设计中能够获得很好的灵活性。同时，如果上层想要增加各种新的特性，或者对来自不同企业或组织的程序员贡献的特性，也能够很容易地增加进来，可以避开复杂的通信层而将注意力集中在上层计算框架的处理和优化上，入手难度非常小。另外，对上层计算框架中的各个核心组件的开发、功能增强，以及Bug修复等都会变得更加容易。 Spark RPCSpark 中的消息通信主要涉及 RpcEnv、RpcEndpoint 及 RpcEndpointRef 几个类。 RPCEndpoints 定义了如何处理消息（即，使用哪个函数来处理指定消息）,在通过name完成注册后，RpcEndpoint 就一直存放在 RpcEnv 中。RpcEndpoint 的生命周期按顺序是 onStart，receive 及 onStop，receive 可以被同时调用，如果希望 receive 是线程安全的，可以使用 ThreadSafeRpcEndpoint。 RpcEndpointRef 是 RpcEnv 中的 RpcEndpoint 的引用，是一个序列化的实体以便于通过网络传送或保存以供之后使用。一个 RpcEndpointRef 有一个地址和名字。可以调用 RpcEndpointRef 的 send 方法发送异步的单向的消息给对应的 RpcEndpoint。 RpcEnv 管理各个 RpcEndpoint 并将发送自 RpcEndpointRef 或远程节点的消息分发给对应的 RpcEndpoint。对于 RpcEnv 没有 catch 到的异常，会通过 RpcCallContext.sendFailure 将该异常发回给消息发送者或记日志。 RpcEnvFactoryRpcEnvFactory 是构造 RpcEnv 的工厂类，调用其 create(config: RpcEnvConfig): RpcEnv 会 new 一个 RpcEnv 实例并返回。 Spark 中实现了两种 RpcEnvFactory： org.apache.spark.rpc.netty.NettyRpcEnvFactory 使用 netty org.apache.spark.rpc.akka.AkkaRpcEnvFactory 使用 akka 其中在 Spark 2.0 已经没有了 AkkaRpcEnvFactory，仅保留了 NettyRpcEnvFactory。在 Spark 1.6 中可以通过设置 spark.rpc 值为 netty （默认）来使用 NettyRpcEnvFactory 或设置为 akka 来使用 AkkaRpcEnvFactory，例如： $ ./bin/spark-shell –conf spark.rpc=netty $ ./bin/spark-shell –conf spark.rpc=akka RpcEnvRpc Environment（RpcEnv）是一个 RpcEndpoints 用于处理消息的环境，RpcEnv 必须通过工厂类 RpcEnvFactory 创建。它管理着整个RpcEndpoints 的声明周期： （1）根据name或uri注册endpoints（2）管理各种消息的处理（3）停止endpoints RpcAddress 与 RpcEndpointAddressRpcAddress 是一个 RpcEnv 的逻辑地址，包含 hostname 和端口，RpcAddress 像 Spark URL 一样编码，比如：spark://host:port。RpcEndpointAddress 是向一个 RpcEnv 注册的 RpcEndpoint 的逻辑地址，包含 RpcAddress 及名字，格式如：spark://[name]@[rpcAddress.host]:[rpcAddress.port] RpcEnv抽象类一个 RpcEnv 是一个 RPC 环境对象，它负责管理 RpcEndpoint 的注册，以及如何从一个 RpcEndpoint 获取到一个 RpcEndpointRef。RpcEndpoint 是一个通信端，例如Spark集群中的 Master，或 Worker，都是一个 RpcEndpoint。但是，如果想要与一个 RpcEndpoint 端进行通信，一定需要获取到该RpcEndpoint一个 RpcEndpointRef，而获取该 RpcEndpointRef 只能通过一个 RpcEnv 环境对象来获取。所以说，一个 RpcEnv 对象才是RPC通信过程中的“指挥官”，在 RpcEnv 类中，有一个核心的方法：1def setupEndpoint(name: String, endpoint: RpcEndpoint): RpcEndpointRef 通过上面方法，可以注册一个 RpcEndpoint 到 RpcEnv 环境对象中，有 RpcEnv 来管理 RpcEndpoint 到 RpcEndpointRef 的绑定关系。在注册 RpcEndpoint 时，每个 RpcEndpoint 都需要有一个唯一的名称。Spark中基于 Netty 实现通信，所以对应的 RpcEnv 实现为 NettyRpcEnv，上面方法的实现，如下所示：123override def setupEndpoint(name: String, endpoint: RpcEndpoint): RpcEndpointRef = &#123; dispatcher.registerRpcEndpoint(name, endpoint)&#125; 调用NettyRpcEnv内部的Dispatcher对象注册一个RpcEndpoint：12345678910111213141516def registerRpcEndpoint(name: String, endpoint: RpcEndpoint): NettyRpcEndpointRef = &#123; val addr = RpcEndpointAddress(nettyEnv.address, name) val endpointRef = new NettyRpcEndpointRef(nettyEnv.conf, addr, nettyEnv) synchronized &#123; if (stopped) &#123; throw new IllegalStateException(\"RpcEnv has been stopped\") &#125; if (endpoints.putIfAbsent(name, new EndpointData(name, endpoint, endpointRef)) != null) &#123; throw new IllegalArgumentException(s\"There is already an RpcEndpoint called $name\") &#125; val data = endpoints.get(name) endpointRefs.put(data.endpoint, data.ref) receivers.offer(data) // for the OnStart message &#125; endpointRef&#125; 一个 RpcEndpoint 只能注册一次（根据 RpcEndpoint 的名称来检查唯一性），这样在 Dispatcher 内部注册并维护 RpcEndpoint 与 RpcEndpointRef 的绑定关系，通过如下两个内部结构：1234567891011121314151617181920212223/** * A message dispatcher, responsible for routing RPC messages to the appropriate endpoint(s). */private[netty] class Dispatcher(nettyEnv: NettyRpcEnv) extends Logging &#123;//这里，每一个命名唯一的RpcEndpoint对应一个线程安全的Inbox，所有发送给一个RpcEndpoint的消息，都由对应的Inbox将对应的消息路由给RpcEndpoint进行处理。 private class EndpointData( val name: String, val endpoint: RpcEndpoint, val ref: NettyRpcEndpointRef) &#123; val inbox = new Inbox(ref, endpoint) &#125; //一个命名唯一的RpcEndpoint在Dispatcher中对应一个EndpointData来维护其信息 private val endpoints: ConcurrentMap[String, EndpointData] = new ConcurrentHashMap[String, EndpointData] private val endpointRefs: ConcurrentMap[RpcEndpoint, RpcEndpointRef] = new ConcurrentHashMap[RpcEndpoint, RpcEndpointRef] // Track the receivers whose inboxes may contain messages. private val receivers = new LinkedBlockingQueue[EndpointData]...&#125; 我们来看看RpcEnv的具体内容： 12345678910111213141516171819202122232425262728293031private[spark] abstract class RpcEnv(conf: SparkConf) &#123; private[spark] val defaultLookupTimeout = RpcUtils.lookupRpcTimeout(conf) //返回endpointRef private[rpc] def endpointRef(endpoint: RpcEndpoint): RpcEndpointRef //返回RpcEnv监听的地址 def address: RpcAddress //注册一个RpcEndpoint到RpcEnv并返回RpcEndpointRef def setupEndpoint(name: String, endpoint: RpcEndpoint): RpcEndpointRef //通过uri异步地查询RpcEndpointRef def asyncSetupEndpointRefByURI(uri: String): Future[RpcEndpointRef] //通过uri查询RpcEndpointRef，这种方式会产生阻塞 def setupEndpointRefByURI(uri: String): RpcEndpointRef = &#123; defaultLookupTimeout.awaitResult(asyncSetupEndpointRefByURI(uri)) &#125; //通过address和endpointName查询RpcEndpointRef，这种方式会产生阻塞 def setupEndpointRef(address: RpcAddress, endpointName: String): RpcEndpointRef = &#123; setupEndpointRefByURI(RpcEndpointAddress(address, endpointName).toString) &#125; //关掉endpoint def stop(endpoint: RpcEndpointRef): Unit //关掉RpcEnv def shutdown(): Unit //等待结束 def awaitTermination(): Unit //没有RpcEnv的话RpcEndpointRef是无法被反序列化的，这里是反序列化逻辑 def deserialize[T](deserializationAction: () =&gt; T): T //返回文件server实例 def fileServer: RpcEnvFileServer //开一个针对给定URI的channel用来下载文件 def openChannel(uri: String): ReadableByteChannel&#125; 另外RpcEnv有一个伴生对象，实现了create方法：123456789101112private[spark] object RpcEnv &#123; def create( name: String, host: String, port: Int, conf: SparkConf, securityManager: SecurityManager, clientMode: Boolean = false): RpcEnv = &#123; val config = RpcEnvConfig(conf, name, host, port, securityManager, clientMode) new NettyRpcEnvFactory().create(config) &#125;&#125; 创建NettyRpcEnv环境对象创建NettyRpcEnv对象，是一个非常重的操作，所以在框架里使用过程中要尽量避免重复创建。创建NettyRpcEnv，会创建很多用来处理底层RPC通信的线程和数据结构。具体的创建过程，如下图所示：具体要点，描述如下： 创建一个NettyRpcEnv对象对象，需要通过NettyRpcEnvFactory来创建 Dispatcher负责RPC消息的路由，它能够将消息路由到对应的RpcEndpoint进行处理 NettyStreamManager负责提供文件服务（文件、JAR文件、目录） NettyRpcHandler负责处理网络IO事件，接收RPC调用请求，并通过Dispatcher派发消息 TransportContext负责管理网路传输上下文信息：创建MessageEncoder、MessageDecoder、TransportClientFactory、TransportServer TransportServer配置并启动一个RPC Server服务 RpcEndpoint特质RpcEndpoint 定义了 RPC 通信过程中的通信端对象，除了具有管理一个 RpcEndpoint 生命周期的操作（constructor -&gt; onStart -&gt; receive* -&gt; onStop），并给出了通信过程中一个 RpcEndpoint 所具有的基于事件驱动的行为（连接、断开、网络异常），实际上对于Spark框架来说主要是接收消息并处理，具体可以看对应特质 RpcEndpoint 的代码定义，如下所示: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748private[spark] trait RpcEndpoint &#123; //当前RpcEndpoint注册到的RpcEnv主子，可以类比为Akka中的actorSystem val rpcEnv: RpcEnv //直接用来发送消息的RpcEndpointRef，可以类比为Akka中的actorRef final def self: RpcEndpointRef = &#123; require(rpcEnv != null, \"rpcEnv has not been initialized\") rpcEnv.endpointRef(this) &#125; //处理来自RpcEndpointRef.send或者RpcCallContext.reply的消息 def receive: PartialFunction[Any, Unit] = &#123; case _ =&gt; throw new SparkException(self + \" does not implement 'receive'\") &#125; //处理来自RpcEndpointRef.ask的消息，会有相应的回复 def receiveAndReply(context: RpcCallContext): PartialFunction[Any, Unit] = &#123; case _ =&gt; context.sendFailure(new SparkException(self + \" won't reply anything\")) &#125; def onError(cause: Throwable): Unit = &#123; // By default, throw e and let RpcEnv handle it throw cause &#125; def onConnected(remoteAddress: RpcAddress): Unit = &#123; // By default, do nothing. &#125; def onDisconnected(remoteAddress: RpcAddress): Unit = &#123; // By default, do nothing. &#125; def onNetworkError(cause: Throwable, remoteAddress: RpcAddress): Unit = &#123; // By default, do nothing. &#125; def onStart(): Unit = &#123; // By default, do nothing. &#125; def onStop(): Unit = &#123; // By default, do nothing. &#125; final def stop(): Unit = &#123; val _self = self if (_self != null) &#123; rpcEnv.stop(_self) &#125; &#125;&#125; RpcEndpointRefRpcEndpointRef 是一个对 RpcEndpoint 的远程引用对象，通过它可以向远程的 RpcEndpoint 端发送消息以进行通信。RpcEndpointRef 特质的定义，代码如下所示：1234567891011121314151617181920212223private[spark] abstract class RpcEndpointRef(conf: SparkConf) extends Serializable with Logging &#123; private[this] val maxRetries = RpcUtils.numRetries(conf) private[this] val retryWaitMs = RpcUtils.retryWaitMs(conf) private[this] val defaultAskTimeout = RpcUtils.askRpcTimeout(conf) def address: RpcAddress def name: String def send(message: Any): Unit def ask[T: ClassTag](message: Any, timeout: RpcTimeout): Future[T] def ask[T: ClassTag](message: Any): Future[T] = ask(message, defaultAskTimeout) def askWithRetry[T: ClassTag](message: Any): T = askWithRetry(message, defaultAskTimeout) def askWithRetry[T: ClassTag](message: Any, timeout: RpcTimeout): T = &#123; ... ... &#125;&#125; 上面代码中，send 方法发送消息后不等待响应，亦即 Send-and-forget ，Spark中基于 Netty 实现，实现在 NettyRpcEndpointRef 中，如下所示：1234override def send(message: Any): Unit = &#123; require(message != null, \"Message is null\") nettyEnv.send(RequestMessage(nettyEnv.address, this, message))&#125; 可见，它是通过 NettyRpcEnv 来发送 RequestMessage 消息，并将当前 NettyRpcEndpointRef 封装到 RequestMessage 消息对象中发送出去，通信对端通过该 NettyRpcEndpointRef 能够识别出消息来源。 而ask方法发送消息后需要等待通信对端给予响应，通过 Future 来异步获取响应结果，也是在 NettyRpcEndpointRef 中实现，如下所示:123override def ask[T: ClassTag](message: Any, timeout: RpcTimeout): Future[T] = &#123; nettyEnv.ask(RequestMessage(nettyEnv.address, this, message), timeout)&#125; 类似的，也是通过 NettyRpcEnv 来发送一个 RequestMessage 消息。 消息路由过程分析基于Standalone模式，Spark集群具有Master和一组Worker，Worker与Master之间需要进行通信，我们以此为例，来说明基于Spark PRC层是如何实现消息的路由的。首先看Master端实现，代码如下所示：123456789101112def startRpcEnvAndEndpoint( host: String, port: Int, webUiPort: Int, conf: SparkConf): (RpcEnv, Int, Option[Int]) = &#123; val securityMgr = new SecurityManager(conf) val rpcEnv = RpcEnv.create(SYSTEM_NAME, host, port, conf, securityMgr) val masterEndpoint = rpcEnv.setupEndpoint(ENDPOINT_NAME, new Master(rpcEnv, rpcEnv.address, webUiPort, securityMgr, conf)) val portsResponse = masterEndpoint.askWithRetry[BoundPortsResponse](BoundPortsRequest) (rpcEnv, portsResponse.webUIPort, portsResponse.restPort)&#125; 上面代码中，创建一个RpcEnv对象，通过创建一个NettyRpcEnvFactory对象来完成该RpcEnv对象的创建，实际创建了一个NettyRpcEnv对象。接着，通过setupEndpoint方法注册一个RpcEndpoint，这里Master就是一个RpcEndpoint，返回的masterEndpoint是Master的RpcEndpointRef引用对象。下面，我们看一下，发送一个BoundPortsRequest消息，具体的消息路由过程，如下图所示：上图中显示本地消息和远程消息派发的流程，最主要的区别是在接收消息时：接收消息走的是Inbox，发送消息走的是Outbox。 本地消息路由发送一个BoundPortsRequest消息，实际走的是本地消息路由，直接放到对应的Inbox中，对应的代码处理逻辑如下所示：12345678910111213141516171819private def postMessage( endpointName: String, message: InboxMessage, callbackIfStopped: (Exception) =&gt; Unit): Unit = &#123; val error = synchronized &#123; val data = endpoints.get(endpointName) if (stopped) &#123; Some(new RpcEnvStoppedException()) &#125; else if (data == null) &#123; Some(new SparkException(s\"Could not find $endpointName.\")) &#125; else &#123; data.inbox.post(message) receivers.offer(data) None &#125; &#125; // We don't need to call `onStop` in the `synchronized` block error.foreach(callbackIfStopped)&#125; 上面通过data.inbox派发消息，然后将消息data :EndpointData放入到receivers队列，触发Dispatcher内部的MessageLoop线程去消费，如下所示： private class MessageLoop extends Runnable { override def run(): Unit = { try { while (true) { try { val data = receivers.take() if (data == PoisonPill) { // Put PoisonPill back so that other MessageLoops can see it. receivers.offer(PoisonPill) return } data.inbox.process(Dispatcher.this) } catch { case NonFatal(e) =&gt; logError(e.getMessage, e) } } } catch { case ie: InterruptedException =&gt; // exit } }} 这里，又继续调用Inbox的process方法来派发消息到指定的RpcEndpoint。通过上面的序列图，我们可以通过源码分析看到，原始消息被层层封装为一个RpcMessage ，该消息在Inbox的process方法中处理派发逻辑，如下所示： case RpcMessage(_sender, content, context) =&gt; try { endpoint.receiveAndReply(context).applyOrElseAny, Unit }) } catch { case NonFatal(e) =&gt; context.sendFailure(e) // Throw the exception – this exception will be caught by the safelyCall function. // The endpoint’s onError function will be called. throw e } 到这里，消息已经发送给对应的RpcEndpoint的receiveAndReply方法，我们这里实际上是Master实现类，这里的消息解包后为content: BoundPortsRequest，接下来应该看Master的receiveAndReply方法如何处理该本地消息，代码如下所示：case BoundPortsRequest =&gt; context.reply(BoundPortsResponse(address.port, webUi.boundPort, restServerBoundPort))可以看出，实际上上面的处理逻辑没有什么处理，只是通过BoundPortsResponse返回了几个Master端的几个端口号数据。 远程消息路由我们都知道，Worker启动时，会向Master注册，通过该场景我们分析一下远程消息路由的过程。先看一下Worker端向Master注册过程，如下图所示： Worker启动时，会首先获取到一个Master的RpcEndpointRef远程引用，通过该引用对象能够与Master进行RPC通信，经过上面消息派发，最终通过Netty的Channel将消息发送到远程Master端。通过前面说明，我们知道Worker向Master注册的消息RegisterWorker应该最终会被路由到Master对应的Inbox中，然后派发给Master进行处理。下面，我们看一下Master端接收并处理消息的过程，如下图所示：上图分为两部分：一部分是从远端接收消息RegisterWorker，将接收到的消息放入到Inbox中；另一部分是触发MessageLoop线程处理该消息，进而通过调用Inbox的process方法，继续调用RpcEndpoint（Master）的receiveAndReply方法，处理消息RegisterWorker，如下所示：case RegisterWorker( id, workerHost, workerPort, workerRef, cores, memory, workerWebUiUrl) =&gt; logInfo(“Registering worker %s:%d with %d cores, %s RAM”.format( workerHost, workerPort, cores, Utils.megabytesToString(memory))) if (state == RecoveryState.STANDBY) { context.reply(MasterInStandby) } else if (idToWorker.contains(id)) { context.reply(RegisterWorkerFailed(“Duplicate worker ID”)) } else { val worker = new WorkerInfo(id, workerHost, workerPort, cores, memory, workerRef, workerWebUiUrl) if (registerWorker(worker)) { persistenceEngine.addWorker(worker) context.reply(RegisteredWorker(self, masterWebUiUrl)) schedule() } else { val workerAddress = worker.endpoint.address logWarning(“Worker registration failed. Attempted to re-register worker at same “ + “address: “ + workerAddress) context.reply(RegisterWorkerFailed(“Attempted to re-register worker at same address: “ + workerAddress)) } } 如果Worker注册成功，则Master会通过context对象回复Worker响应：context.reply(RegisteredWorker(self, masterWebUiUrl))这样，如果一切正常，则Worker会收到RegisteredWorker响应消息，从而获取到Master的RpcEndpointRef引用对象，能够通过该引用对象与Master交互。","tags":[{"name":"spark","slug":"spark","permalink":"http://yoursite.com/tags/spark/"},{"name":"rpc","slug":"rpc","permalink":"http://yoursite.com/tags/rpc/"}]},{"title":"获取多说和 Disqus 文章评论数的方法","date":"2016-06-14T13:19:34.000Z","path":"2016/06/14/duoshuo-disqus-comment-count/","text":"前言不少网站使用的是多说等第三方评论系统，有时候需要在特定位置显示对应文章的评论数，下面的方法可以快速获取多说和 Disqus 的文章评论数，所得为纯数字，方便排版布局。 See the Pen Count Comment for Duoshuo &amp; Disqus by MOxFIVE (@MOxFIVE) on CodePen. 多说多说提供了获取文章评论数的接口，需要做的只是填好相关参数，然后再从返回的 JSON 数据中提取出评论数即可 请求参数 short_name: 站点注册的多说二级域名，比如注册了 http://helloworld.duoshuo.com/, 则对应二级域名为 helloworld; threads: 文章的 thread-key, 与评论框中 data-thread-key 一致。 返回数据示例1234567891011121314151617181920&#123; \"response\": &#123; \"about/index.html\": &#123; \"thread_id\": \"6205475504969401090\", \"channel_key\": null, \"thread_key\": \"about/index.html\", \"reposts\": 0, \"views\": 0, \"likes\": 8, \"dislikes\": 0, \"comments\": 187 &#125; &#125;, \"options\": &#123; \"comments_zero\": \"暂无评论\", \"comments_one\": \"1条评论\", \"comments_multiple\": \"&#123;num&#125;条评论\" &#125;, \"code\": 0&#125; 数据提取 需要的只是评论数 comments，这里使用 jQuery 的 getJSON 比较方便 123456789101112$(function() &#123; var shortName = \"moxfive\"; var threads = \"about/index.html\"; var jsonUrl = \"http://api.duoshuo.com/threads/counts.jsonp?short_name=\" + shortName + \"&amp;threads=\" + threads + \"&amp;callback=?\"; $.getJSON(jsonUrl, function(result) &#123; $.each(result.response, function(i, field) &#123; var value = field.comments; $(\".duoshuo-count\").text(value); &#125;) &#125;)&#125;) 获得的值会显示在匹配的区域中 1&lt;span class=\"duoshuo-count\"&gt;&lt;/span&gt; 适用场景 适合只需显示当前文章评论数的页面； 若页面中需要分开显示多篇文章评论数，则按 多说官方教程 配置比较合适。JSON 解析法每篇文章都需要发起一次请求，文章一多相对效率就低了。 Disqus加载相关 JS 域名中填入自己的 Disqus shortname，获取方式参考 官方文档 1234&lt;script id=\"dsq-count-scr\" src=\"//&lt;shortname&gt;.disqus.com/count.js\" async&gt;&lt;/script&gt;&lt;!-- e.g. --&gt;&lt;script id=\"dsq-count-scr\" src=\"//moxfive.disqus.com/count.js\" async&gt;&lt;/script&gt; 显示评论数 这里介绍两种借助特定 Class 显示评论数的方法 123456&lt;!-- 通过 `data-disqus-identifier` --&gt;&lt;span class=\"disqus-comment-count\" data-disqus-identifier=\"about/index.html\"&gt;&lt;/span&gt;&lt;!-- 通过 `data-disqus-url` --&gt;&lt;span class=\"disqus-comment-count\" data-disqus-url=\"http://MOxFIVE.xyz/about/index.html\"&gt;&lt;/span&gt; identifier 和 url 的值如果不清楚，可以自行设置，方法参考 官方文档 获取的评论数不正确，很可能是因为远程数据没更新，等等就好。 提取纯数字 上面方法显示的评论数是类似 1 Comment 这样的格式，这里可以把它转为纯数字格式 1 使用 jQuery 绑定事件，当评论数信息显示时去掉非数字字符即可。为了避免循环错误，这里新建了一个标签来显示评论数。 1234567var $disqusCount = $(\".disqus-comment-count\");$disqusCount.bind(\"DOMNodeInserted\", function(e) &#123; var num = $(this).text().replace(/[^0-9]/ig,\"\"); $(this).after(\"&lt;span class='count-comment'&gt;&lt;/span&gt;\"); $(this).siblings(\".count-comment\").text(num); $(this).remove();&#125;) 相关链接 多说官方文档: 获取文章评论、转发数 多说官方文档: 代码显示【文章评论数】方法 Disqus Help: Adding comment count links to your home page","tags":[{"name":"多说","slug":"多说","permalink":"http://yoursite.com/tags/多说/"},{"name":"jQuery","slug":"jQuery","permalink":"http://yoursite.com/tags/jQuery/"},{"name":"Disqus","slug":"Disqus","permalink":"http://yoursite.com/tags/Disqus/"},{"name":"JSON","slug":"JSON","permalink":"http://yoursite.com/tags/JSON/"}]},{"title":"为 Hexo 添加可折叠的文章目录","date":"2016-06-13T12:06:30.000Z","path":"2016/06/13/hexo-collapsible-toc/","text":"前言Hexo 支持自动给文章加上目录，但默认生成的目录比较简陋，好在我们可以手动改进一下它，比如增加 点击展开/收起多级目录 的功能。 前期准备目录生成 比如 Yelee 主题中用以下代码自带生成目录，使用 Hexo 自带的辅助函数 &lt;%-toc(post.content)%&gt; 来生成文章目录，同时将目录包裹起来以便修改样式。其他主题大同小异。 1234&lt;div id=\"toc\" class=\"toc-article\"&gt; &lt;strong class=\"toc-title\"&gt;文章目录&lt;/strong&gt; &lt;%- toc(post.content) %&gt;&lt;/div&gt; 观察结构 审查元素，观察到生成后的目录 HTML 结构大致如下 12345678910111213141516171819202122232425&lt;div id=\"toc\" class=\"toc-article\"&gt; &lt;strong class=\"toc-title\"&gt;文章目录&lt;/strong&gt; &lt;ol class=\"toc\"&gt; &lt;li class=\"toc-item toc-level-2\"&gt; &lt;a class=\"toc-link\" href=\"#标题1\"&gt; &lt;span class=\"toc-number\"&gt;1.&lt;/span&gt; &lt;span class=\"toc-text\"&gt;标题1&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=\"toc-item toc-level-2\"&gt; &lt;a class=\"toc-link\" href=\"#标题2\"&gt; &lt;span class=\"toc-number\"&gt;2.&lt;/span&gt; &lt;span class=\"toc-text\"&gt;标题2&lt;/span&gt; &lt;/a&gt; &lt;!-- 含子标题 --&gt; &lt;ol class=\"toc-child\"&gt; &lt;li class=\"toc-item toc-level-3\"&gt; &lt;a class=\"toc-link\" href=\"#子标题1\"&gt;&lt;span class=\"toc-number\"&gt;2.1.&lt;/span&gt; &lt;span class=\"toc-text\"&gt;子标题1&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li class=\"toc-item toc-level-3\"&gt; &lt;a class=\"toc-link\" href=\"#子标题2\"&gt;&lt;span class=\"toc-number\"&gt;2.2.&lt;/span&gt; &lt;span class=\"toc-text\"&gt;子标题2&lt;/span&gt;&lt;/a&gt; &lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;/ol&gt;&lt;/div&gt; 功能构思 在每个包含子标题的大标题前插入小图标； 找出需要绑定点击事件的元素； 理清每次事件中子目录折叠和小图标切换的逻辑。 代码编写添加小图标123456var $itemHasChild = $(\"#toc .toc-item:has(&gt; .toc-child)\");var $titleHasChild = $itemHasChild.children(\".toc-link\");$itemHasChild.prepend(\"&lt;i class='fa fa-caret-down'&gt;&lt;/i&gt;&lt;i class='fa fa-caret-right'&gt;&lt;/i&gt;\");var $iconToFold = $(\".toc-item &gt; .fa-caret-down\");$iconToExpand.addClass(\"hide\"); 这里在匹配的大标题前插入了两个 &lt;i&gt; 标签，用于表示目录 展开 和 收起 这两种状态；标签使用了 Font Awesome 中的小三角形图标，可自行更换或者用 CSS 绘制； 点击小图标1234567891011var clickIcon = function()&#123; $(\"#toc .toc-item &gt; i\").click(function()&#123; $(this).siblings(\".toc-child\").slideToggle(100); $(this).toggleClass(\"hide\"); $(this).siblings(\"i\").toggleClass(\"hide\"); &#125;)&#125;()// 默认展开目录，所以隐藏掉表示“目录已展开”的图标（向下的小三角）var $iconToFold = $(\".toc-item &gt; .fa-caret-down\");$iconToExpand.addClass(\"hide\"); 点击小图标折叠次级目录，同时切换到相应图标； 这里图标的显示状态是在 inline-block 和 none 中切换，用 toggleClass 比较合适。 点击大标题1234567891011121314var clickTitle = function()&#123; $titleHasChild.dblclick(function()&#123; $(this).siblings(\".toc-child\").hide(100); $(this).siblings(\"i\").toggleClass(\"hide\"); &#125;) // After dblclick enent $titleHasChild.click(function()&#123; var $curentTocChild = $(this).siblings(\".toc-child\"); if ($curentTocChild.is(\":hidden\")) &#123; $curentTocChild.show(100); $(this).siblings(\"i\").toggleClass(\"hide\"); &#125; &#125;)&#125;() 这里按我自己的习惯设计成 单击 即展开目录，而折叠目录需要 双击。因为点击某个目录时，代表我希望了解该目录的内容，所以不希望单击就把对应目录给收起了； 单击事件要在双击事件之后，要不点击事件会出现异常。 点击总标题 之前给目录区加了个总标题 文章目录，现在可以给赋予其函数，以便点击时 展开/收起 所有目录 1234567891011121314151617181920212223var clickTocTitle = function()&#123; var $iconToExpand = $(\".toc-item &gt; .fa-caret-right\"); var $iconToFold = $(\".toc-item &gt; .fa-caret-down\"); var $subToc = $titleHasChild.next(\".toc-child\"); var $tocTitle = $(\"#toc .toc-title\"); // 当包含多级目录时再执行 if ($titleHasChild.length) &#123; $tocTitle.addClass(\"clickable\"); $tocTitle.click(function()&#123; if ($subToc.is(\":hidden\")) &#123; $subToc.show(150); $iconToExpand.removeClass(\"hide\"); $iconToFold.addClass(\"hide\"); &#125; else &#123; $subToc.hide(100); $iconToExpand.addClass(\"hide\"); $iconToFold.removeClass(\"hide\"); &#125; &#125;) &#125;&#125;() CSS 样式 功能函数设置好后，再通过 CSS 调整下样式即可，样式根据主题风格和个人喜好自行调整； 下面是部分自用样式，可参考 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364/*小图标*/#toc ol.toc li.toc-item i &#123; display: inline-block; margin-left: -0.9em; width: 0.9em; color: #b3b3b3; font-weight: bold; cursor: pointer;&#125;#toc ol.toc li.toc-item i:hover &#123; color: #000;&#125;/*关联图标的 Class*/#toc ol.toc li.toc-item i.hide &#123; display: none;&#125;/*关联总标题的 Class*/#toc .toc-title.clickable &#123; cursor: pointer;&#125;#toc .toc-title.clickable:hover &#123; color: #88acdb;&#125;#toc .toc-title.clickable:active &#123; color: #d3d3d3;&#125;/*其他目录相关*/#toc &#123; font-size: 0.9em; line-height: 1.65em;&#125;#toc .toc-title &#123; font-weight: bold; color: #808080;&#125;#toc ol.toc &#123; margin-left: 0; padding: 0.7em; padding-right: 0;&#125;#toc ol.toc li.toc-item &#123; list-style-type: none;&#125;#toc ol.toc li.toc-item:hover &#123; background: none;&#125;#toc ol.toc a.toc-link &#123; color: #808080;&#125;#toc ol.toc a.toc-link:visited &#123; color: #f48385;&#125;#toc ol.toc a.toc-link:hover &#123; color: #88acdb; text-decoration: none; background: rgba(158,188,226,0.21);&#125;#toc ol.toc ol.toc-child &#123; padding-left: 1.25em; margin: 4px 0;&#125; 相关链接 Font Awesome: http://fontawesome.io/ Hexo TOC 辅助函数: https://hexo.io/zh-cn/docs/helpers.html#toc 为 Hexo 博客添加目录 by 况琪 on 2015/02/09: http://kuangqi.me/tricks/enable-table-of-contents-on-hexo/ feat: collapsible TOC 可折叠目录 by MOxFIVE on 2016/06/05: https://github.com/MOxFIVE/hexo-theme-yelee/commit/85764bbf482c78d819f8ca87bf9fe390d523dd3b","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"jQuery","slug":"jQuery","permalink":"http://yoursite.com/tags/jQuery/"}]},{"title":"让 Hexo 博客支持本地站内搜索","date":"2016-05-31T05:50:19.000Z","path":"2016/05/31/hexo-local-search/","text":"前言最近给 Yelee 主题加上了本地搜索功能，终于能在自己的博客里愉快地搜索资料了。大致思路来源于 HaHack 的 教程，根据需要做了些调整。重新整理一下本地搜索折腾记录，分享于此。 索引生成要使用搜索，必须先生成博客索引数据，Hexo 可以通过插件生成：1npm install --save hexo-generator-search 插件默认只索引文章(post)，要想页面(page)也能被检索，只需要在 Hexo 站点 _config.yml 中添加如下配置即可：123search: path: search.xml field: all 更多配置说明可到插件页面查看：hexo-generator-search 界面结构因为自己博客是双栏，顺手就把搜索结果放在边栏中了，大致 HTML 结构如下： 123456&lt;form id=\"search-form\"&gt; &lt;!-- 搜索框相关 --&gt; &lt;input type=\"text\" id=\"local-search-input\" name=\"q\" results=\"0\" placeholder=\"search...\" class=\"search form-control\" autocomplete=\"off\" autocorrect=\"off\"/&gt; &lt;i class=\"fa fa-times\" onclick=\"resetSearch()\"&gt;&lt;/i&gt; &lt;!-- 清空/重置搜索框 --&gt;&lt;/form&gt;&lt;div id=\"local-search-result\"&gt;&lt;/div&gt; &lt;!-- 搜索结果区 --&gt;&lt;p class='no-result'&gt;No results found &lt;/p&gt; &lt;!-- 无匹配时显示，注意请在 CSS 中设置默认隐藏 --&gt; 搜索重置按钮使用了 Font Awesome 图标，可按需更换 功能代码基础代码 基础搜索函数 (jQuery) 来源于 HaHack 的教程，个人进行了些调整：1.新标签中打开文章页面；2.减少截取的字符数；3.去掉部分非必要的代码 使用时将下边代码保存为 js 文件并在页面中的合适位置引入 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788// A local search script with the help of [hexo-generator-search](https://github.com/PaicHyperionDev/hexo-generator-search)// Copyright (C) 2015 // Joseph Pan &lt;http://github.com/wzpan&gt;// Shuhao Mao &lt;http://github.com/maoshuhao&gt;// Edited by MOxFIVE &lt;http://github.com/MOxFIVE&gt;var searchFunc = function(path, search_id, content_id) &#123; 'use strict'; $.ajax(&#123; url: path, dataType: \"xml\", success: function( xmlResponse ) &#123; // get the contents from search data var datas = $( \"entry\", xmlResponse ).map(function() &#123; return &#123; title: $( \"title\", this ).text(), content: $(\"content\",this).text(), url: $( \"url\" , this).text() &#125;; &#125;).get(); var $input = document.getElementById(search_id); var $resultContent = document.getElementById(content_id); $input.addEventListener('input', function()&#123; var str='&lt;ul class=\\\"search-result-list\\\"&gt;'; var keywords = this.value.trim().toLowerCase().split(/[\\s\\-]+/); $resultContent.innerHTML = \"\"; if (this.value.trim().length &lt;= 0) &#123; return; &#125; // perform local searching datas.forEach(function(data) &#123; var isMatch = true; var content_index = []; var data_title = data.title.trim().toLowerCase(); var data_content = data.content.trim().replace(/&lt;[^&gt;]+&gt;/g,\"\").toLowerCase(); var data_url = data.url; var index_title = -1; var index_content = -1; var first_occur = -1; // only match artiles with not empty titles and contents if(data_title != '' &amp;&amp; data_content != '') &#123; keywords.forEach(function(keyword, i) &#123; index_title = data_title.indexOf(keyword); index_content = data_content.indexOf(keyword); if( index_title &lt; 0 &amp;&amp; index_content &lt; 0 )&#123; isMatch = false; &#125; else &#123; if (index_content &lt; 0) &#123; index_content = 0; &#125; if (i == 0) &#123; first_occur = index_content; &#125; &#125; &#125;); &#125; // show search results if (isMatch) &#123; str += \"&lt;li&gt;&lt;a href='\"+ data_url +\"' class='search-result-title' target='_blank'&gt;\"+ \"&gt; \" + data_title +\"&lt;/a&gt;\"; var content = data.content.trim().replace(/&lt;[^&gt;]+&gt;/g,\"\"); if (first_occur &gt;= 0) &#123; // cut out characters var start = first_occur - 6; var end = first_occur + 6; if(start &lt; 0)&#123; start = 0; &#125; if(start == 0)&#123; end = 10; &#125; if(end &gt; content.length)&#123; end = content.length; &#125; var match_content = content.substr(start, end); // highlight all keywords keywords.forEach(function(keyword)&#123; var regS = new RegExp(keyword, \"gi\"); match_content = match_content.replace(regS, \"&lt;em class=\\\"search-keyword\\\"&gt;\"+keyword+\"&lt;/em&gt;\"); &#125;) str += \"&lt;p class=\\\"search-result\\\"&gt;\" + match_content +\"...&lt;/p&gt;\" &#125; &#125; &#125;) $resultContent.innerHTML = str; &#125;) &#125; &#125;)&#125; 调用函数 search.xml 使用默认路径，可以直接把下面代码放到 js 文件中 12var path = \"/search.xml\";searchFunc(path, 'local-search-input', 'local-search-result'); 上面的函数， search.xml 文件会跟随页面一起加载，如果索引文件太大，可能会影响页面加载速度，可以将其调整为激活搜索框时再下载所需文件 1234567var inputArea = document.querySelector(\"#local-search-input\");var getSearchFile = function()&#123; var path = \"/search.xml\"; searchFunc(path, 'local-search-input', 'local-search-result');&#125;inputArea.onfocus = function()&#123; getSearchFile() &#125; 搜索重置 提供按钮用于清空搜索结果和重置搜索框，按钮已经绑定了点击事件，直接写函数就行 12345678910var $resetButton = $(\"#search-form .fa-times\");var $resultArea = $(\"#local-search-result\");inputArea.oninput = function()&#123; $resetButton.show(); &#125;resetSearch = function()&#123; $resultArea.html(\"\"); document.querySelector(\"#search-form\").reset(); $resetButton.hide(); $(\".no-result\").hide();&#125; 屏蔽回车 虽然用了表单但其实并没有数据要提交，所以这里需要手动屏蔽掉回车键 1inputArea.onkeydown = function()&#123; if(event.keyCode==13) return false&#125; 无搜索结果 无搜索结果时，显示指定的提示内容。 原本想在基础搜索函数上改，折腾无果，只能曲线救国，通过监听搜索区内容变动来判断是否有匹配的内容 1234567$resultArea.bind(\"DOMNodeRemoved DOMNodeInserted\", function(e) &#123; if (!$(e.target).text()) &#123; $(\".no-result\").show(200); &#125; else &#123; $(\".no-result\").hide(); &#125;&#125;) CSS 样式样式部分按自己喜好设计即可，下面是个人目前使用的样式，可参考1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495/*搜索框*/.search &#123; width: 68%; height: 18px; margin-top: 1px; padding: 0; font-family: inherit; border: 2px solid transparent; border-bottom: 2px solid #d3d3d3; border-radius: 2px; opacity: 0.65; background: none;&#125;.search:hover &#123; border: 2px solid #d3d3d3; opacity: 1; box-shadow: 0 0 10px rgba(0,0,0,0.3);&#125;/*搜索重置按钮*/#search-form .fa-times &#123; display: none; padding: 1px 0.7em; box-shadow: 0 0 3px rgba(0,0,0,0.15); cursor: pointer; color: #808080;&#125;#search-form .fa-times:active &#123; background: #d3d3d3;&#125;#search-form .fa-times:hover &#123; zoom: 1.1; padding: 1px 0.6em; border: 1px solid #d3d3d3; box-shadow: 0 0 6px rgba(0,0,0,0.25);&#125;/*搜索结果区*/#local-search-result &#123; margin: auto -12% auto -6%; font-size: 0.9em; text-align: left; word-break: break-all;&#125;#local-search-result ul.search-result-list li:hover &#123; font-weight: normal;&#125;/*单条搜索结果*/#local-search-result li &#123; margin: 0.5em auto; border-bottom: 2px solid #d3d3d3;&#125;#local-search-result .search-result-list li:hover &#123; background: rgba(158,188,226,0.21); box-shadow: 0 0 5px rgba(0,0,0,0.2);&#125;/*匹配的标题*/#local-search-result a.search-result-title &#123; line-height: 1.2; font-weight: bold; color: #708090;&#125;/*搜索预览段落*/#local-search-result p.search-result &#123; margin: 0.4em auto; line-height: 1.2em; max-height: 3.6em; overflow: hidden; font-size: 0.8em; text-align: justify; color: #808080;&#125;/*匹配的关键词*/#local-search-result em.search-keyword &#123; color: #f58e90; border-bottom: 1px dashed #f58e90; font-weight: bold; font-size: 0.85em;&#125;/*无匹配搜索结果时显示*/p.no-result &#123; display: none; margin: 2em 0 2em 6%; padding-bottom: 0.5em; text-align: left; color: #808080; font-family: font-serif serif; border-bottom: 2px solid #d3d3d3;&#125; 一些不足 [ ] 如果文章很多，索引文件可能很大，无论是随页面下载还是激活搜索框再下载，似乎都不理想； [ ] 搜索结果中全部内容都转成了小写，应该有办法忽略大小写的同时，保持文本原始大小写格式； [ ] 使用自动补全填上的内容并不能立即显示搜索结果，待改进。 相关链接 jQuery-based Local Search Engine for Hexo by HaHack on 2015/10/08: http://hahack.com/codes/local-search-engine-for-hexo/ feat: Local Site Search | 本地站内搜索 by MOxFIVE on 2016/05/25: https://github.com/MOxFIVE/hexo-theme-yelee/commit/0280f6a17d1a0fa1f52056856082e022dfac220c hexo-generator-search: https://github.com/PaicHyperionDev/hexo-generator-search","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"},{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"jQuery","slug":"jQuery","permalink":"http://yoursite.com/tags/jQuery/"}]},{"title":"关于 Yelee 主题背景图的压缩与优化","date":"2016-05-17T07:59:04.000Z","path":"2016/05/17/image-compression/","text":"目前主题里可以使用多张随机大图作背景，如果不做好图片压缩和优化，可能会严重影响网站流畅性。下面简单介绍两种比较便捷的优化方案。 优化说明 请使用 jpg 后缀名的背景图片； 如果可以，使用 渐进式JPEG，让图片加载时逐渐清晰； 将图片品质尽量调低，一般可以压缩到几十kb（背景图半透明显示，因此细节并不重要）； 下图1 为目前主题自带背景图的分辨率和文件大小展示，图2 为渐进式图片加载示例 优化方案PhotoShop 电脑上如果装有 PhotoShop, 那用其来优化图片真是再好不过了 PS 打开图片 → 文件 → 存储为 Web 所用格式 → JPEG 格式，品质 0，勾选 连续 （渐进式），最后存储，这样一张高压缩渐进式的 JPG 背景图就做好了 智图 智图 是腾讯 ISUX 出品的在线图片优化工具，可以方便的对比优化前后的图片，同时可以自行调节图片品质，除了不能设置 渐进式JPEG , 其他基本满足背景图优化需要 进入网站后按提示上传图片，再调低图片品质，之后下载图片即可 因为主题背景图为 jpg 格式，其他格式请转为 jpg 再上传到该网站优化。转换格式方法很多，比如用 Windows 自带的画图打开图片然后另存为 jpg 方案对比 原图为 420kb，智图选择最低品质(10)后约为 129kb； PhotoShop 选择品质 0，可以压缩到 62k，同时可以设为 渐进式JPEG； 因此，有条件的话更推荐使用 PS 压缩背景图。 相关链接 智图: http://zhitu.isux.us/ TinyPNG: https://tinypng.com/ 渐进式 jpeg(progressive jpeg) 图片及其相关 by 张鑫旭 on 2013/01/07: http://www.zhangxinxu.com/wordpress/2013/01/progressive-jpeg-image-and-so-on/ 呆毛王示例壁纸下载: http://moxfive.xyz/resources/saber.jpg 最人性化的壁纸网站: http://www.wallpaperpcmobile.com/","tags":[{"name":"PhotoShop","slug":"PhotoShop","permalink":"http://yoursite.com/tags/PhotoShop/"},{"name":"Yelee","slug":"Yelee","permalink":"http://yoursite.com/tags/Yelee/"}]},{"title":"几个国内专用的公共 DNS","date":"2016-05-11T12:57:08.000Z","path":"2016/05/11/public-dns/","text":"之前 有个网站 自己经常上不去，查了挺久才发现是 DNS 的问题，更换为公共 DNS 后访问恢复正常。由此可见，挑选一个合适自己网络的 DNS 还是挺有必要的。 DNS 简介DNS 全称 Domain Name System，中文译为 域名系统，是因特网的一项服务，其域名服务器的分布式数据库中存储着因特网上域名和 IP 地址相互映射的关系，经解析器解析，使用户能够通过域名来访问互联网。 114DNS114.114.114.114 114.114.115.115 官 网：http://www.114dns.com/关键词：权威，高速，稳定，可靠，无劫持，防钓鱼，防病毒 阿里公共DNS223.5.5.5 223.6.6.6 官 网：http://www.alidns.com/关键词：快速，稳定，智能 腾讯 Public DNS +119.29.29.29 官 网：https://www.dnspod.cn/Products/Public.DNS关键词：快速，准确，稳定 百度公共DNS180.76.76.76 官 网：http://dudns.baidu.com/intro/publicdns/关键词：云防护，无劫持，更精确 oneDNS南方首选：112.124.47.27 北方首选：114.215.126.16 官 网：http://www.onedns.net/关键词：安全，快速，恶意网站拦截，广告过滤，上网加速 CNNIC SDNS1.2.4.8 210.2.4.8 官 网：http://public.sdns.cn/关键词：权威，安全，智能，高速 DNS 选用在线查询 可以通过 在线小工具 测试一下 DNS 的解析速度，结果可以作为参考 本地优选 下载 魔方DNS助手，可以方便地检测，选择和修改 DNS 如果更换 DNS 后网络异常，可以尝试 刷新本地的DNS缓存","tags":[{"name":"DNS","slug":"DNS","permalink":"http://yoursite.com/tags/DNS/"}]},{"title":"在百度分享中使用 Font Awesome 图标","date":"2016-04-20T03:25:10.000Z","path":"2016/04/20/baidu-share-fontawesome/","text":"百度分享自带的图标有点简陋，而自己站点的图标基本来自 Font Awesome，为了美化和统一风格，对其中的图标进行了替换。 See the Pen Baidu Share with Font Awesome by MOxFIVE (@MOxFIVE) on CodePen. 前期准备载入 Font Awesome 通过 CDN 加载 Font Awesome，一般放在页面头部1&lt;link href=\"//cdn.bootcss.com/font-awesome/4.5.0/css/font-awesome.min.css\" rel=\"stylesheet\"&gt; 添加图标 Class 在官网 图标列表 中查询所需代码，添加到百度分享提供的 HTML 代码中 下面以微博、微信等为例: (fa 这个 class 要保留) 1234567&lt;div class=\"bdsharebuttonbox\"&gt; &lt;a href=\"#\" class=\"fa fa-weibo bds_tsina\" data-cmd=\"tsina\" title=\"分享到新浪微博\"&gt;&lt;/a&gt; &lt;a href=\"#\" class=\"fa fa-qq bds_sqq\" data-cmd=\"sqq\" title=\"分享给 QQ 好友\"&gt;&lt;/a&gt; &lt;a href=\"#\" class=\"fa fa-weixin bds_weixin\" data-cmd=\"weixin\" title=\"生成文章二维码\"&gt;&lt;/a&gt; &lt;a href=\"#\" class=\"fa fa-share-alt bds_more\" data-cmd=\"more\"&gt;&lt;/i&gt; &lt;/a&gt;&lt;/div&gt; 样式修改通过 CSS 修改图标的样式，以 微博、微信、QQ 、more(分享到…) 为例，样式已尽可能精简 基本样式1234567891011121314151617/*部分样式可能会被百度分享自带样式覆盖，因而加上 `!important` 确保生效*/.bdsharebuttonbox a, /*.bds_more 关联较多，需单独设置*/.bdsharebuttonbox .bds_more &#123; width: 50px; /*设置图标容器宽度*/ height: 50px !important; /*宽等于高，正方形*/ line-height: 50px !important; /*行高等于图标容器高度，垂直居中*/ text-align: center; /*水平居中*/ padding-left: 0 !important; /*覆盖自带样式，消除内边距*/ font-size: 34px !important; /*图标大小*/ text-decoration: none; /*去掉图标下划线*/ color: #fff !important; /*图标颜色*/&#125;.bdsharebuttonbox a:hover, /*鼠标悬停时图标颜色*/.bds_more:hover &#123; color: #fff !important;&#125; 图标背景123456789101112.bds_tsina &#123; /*新浪微博图标背景色*/ background: #db332f !important;&#125;.bds_sqq &#123; /*QQ*/ background: #1cbcef !important;&#125;.bds_weixin &#123; /*微信*/ background: #8cdc49 !important;&#125;.bds_more &#123; /*分享到...*/ background: #8cbcf5 !important;&#125; 相关链接 Font Awesome: http://fontawesome.io/ 百度分享: http://share.baidu.com/ 百度分享网站ID列表: http://share.baidu.com/help/webid","tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"},{"name":"Font-Awesome","slug":"Font-Awesome","permalink":"http://yoursite.com/tags/Font-Awesome/"}]},{"title":"CSS 设置文本省略 ellipsis (…)","date":"2016-04-18T12:25:35.000Z","path":"2016/04/18/text-overflow-ellipsis/","text":"在 CSS 中应用 ellipsis 属性，可显示省略符号(…)来代表被修剪的文本。 See the Pen text-overflow: ellipsis by MOxFIVE (@MOxFIVE) on CodePen. 单行省略样式代码12&lt;span&gt;CSS is awesome, especially when you can scroll to see extra text instead of just having it overlap other text by default.&lt;/span&gt; 1234567span &#123; display: block; width: 14em; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;&#125; 代码简析1234567891011121314151617text-overflow: ellipsis；// [必需], 文本溢出时显示省略号(…)display: block;// [可选], `ellipsis` 只应用于 `block containers`（块级容器），// 如果所在 HTML 标签非块级，那需要设置 `display` 属性white-space: nowrap;// [必需], 将文本限制在一行内overflow: hidden;// [必需], 隐藏溢出的内容// 可按需要仅设置 `overflow-y` 或 `overflow-x`width: 14em;// [可选], 限制容器宽度// 可使用 `max-width` 多行省略在指定行数后，才使用省略号代替溢出文本，这可以借助 -webkit-line-clamp 属性实现 -webkit- 内核属性，不支持 IE 和 Firefox 浏览器 查看兼容性 样式代码12&lt;p&gt;CSS is awesome, especially when you can scroll to see extra text instead of just having it overlap other text by default.&lt;/p&gt; 123456789p &#123; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; width: 15em; line-height: 1.5; text-overflow: ellipsis; overflow : hidden;&#125; 代码简析12345678910// 必需的属性display: -webkit-box; // 将元素设为弹性盒模型-webkit-line-clamp: 2; // 文本最大行数-webkit-box-orient: vertical; // 模型内元素垂直排列text-overflow: ellipsis;overflow : hidden;// 可选的样式width: 15em; // 限制容器宽度line-height: 1.5; // 建议增大行高，避免文字被腰斩 相关链接 多行文本溢出显示省略号(…)全攻略 by 愚人码头 on 2014/09/30: http://www.css88.com/archives/5206 Overflow Ellipsis: the text-overflow property by W3C on 2015/07/07: https://www.w3.org/TR/css-ui-3/#text-overflow","tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"}]},{"title":"Hexo 页面自动刷新与移动端调试","date":"2016-03-26T16:17:50.000Z","path":"2016/03/27/hexo-browsersync/","text":"前言经常本地调试 Hexo 主题, 如果有工具能监视文件更改幷自动刷新页面，那一定能提高不少效率，Browsersync 就是这样一款浏览器同步测试工具。 自动刷新安装 Browsersync Browsersync 依赖包较多，Mac 和 Linux 中建议加上 sudo 避免安装时因权限不足而报错 1npm install -g browser-sync 安装结束后执行下面命令，能显示对应版本则表示安装成功 1browser-sync --version 如果显示无此命令，请尝试使用 淘宝 NPM 镜像，或者全局科学上网后再安装 安装 Hexo 端插件 要把 Browsersync 应用到 Hexo 上，还需要安装一个小插件 hexo-browsersync 。命令行中进入 Hexo 根目录，执行以下命令: 1npm install hexo-browsersync --save 安装后像往常一样执行 hexo s 开启本地服务器，当相关文件被修改或者保存时，关联的浏览器页面会自带刷新 一些不足 变动后将重新加载整个页面，不能局部刷新； 使用 Hexo 自带服务器时，无法在移动端调试； 偶尔会报错，需要多保存几次； 移动端调试如果只是为了自动刷新页面，或许使用 LiveReload 就够了。Browsersync 真正强大之处在于其多设备调试功能，局域网设备访问同一网址，页面同步变动。 生成静态文件 要在移动端调试，需要先生成 Hexo 站点的静态文件 1hexo g 开启服务 命令行进入静态文件所在的文件夹，默认为 Hexo 根目录下的 public，然后执行以下命令： 1browser-sync start --server --files \"css/*.css, *.html\" 输入完毕按回车，会自动打开网站首页 更多命令行用法请参考 官方文档 局域网访问 回到命令行窗口，External 那行的 IP 地址就是局域网地址，打开你的手机平板访问即可，各种操作和文件修改都会同步变动，调试极为便利 此种方式不是直接修改主题源文件，所以平时一般使用 Hexo 本地服务修改样式，有需要时再生成静态文件在移动端测试页面效果 相关链接 Browsersync: http://www.browsersync.cn/ hexo-browsersync: https://github.com/hexojs/hexo-browsersync 淘宝 NPM 镜像: http://npm.taobao.org/","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"Browsersync","slug":"Browsersync","permalink":"http://yoursite.com/tags/Browsersync/"}]},{"title":"Markdown 表格样式调整与自适应优化","date":"2016-03-04T12:39:17.000Z","path":"2016/03/04/markdown-table-style/","text":"Markdown 写的表格最终会被解析成 HTML 代码，如果使用的编辑器支持自定义 CSS，就能方便的调整样式。如果可以引入 JavaScript，样式自适应也能较好地实现。 See the Pen Table style by MOxFIVE (@MOxFIVE) on CodePen. 样式调整基础概念&lt;table&gt;: 表格 &lt;thead&gt;: table header 表头区 &lt;th&gt;: table headings 表头单元格内容 &lt;tbody&gt;: table body 表格内容区 &lt;tr&gt;: table row 表行 &lt;td&gt;: table data 单元格内容 基本样式123456789101112131415table &#123; width: 100%; /*表格宽度*/ max-width: 65em; /*表格最大宽度，避免表格过宽*/ border: 1px solid #dedede; /*表格外边框设置*/ margin: 15px auto; /*外边距*/ border-collapse: collapse; /*使用单一线条的边框*/ empty-cells: show; /*单元格无内容依旧绘制边框*/&#125;table th,table td &#123; height: 35px; /*统一每一行的默认高度*/ border: 1px solid #dedede; /*内部边框样式*/ padding: 0 10px; /*内边距*/&#125; 表头样式12345table th &#123; font-weight: bold; /*加粗*/ text-align: center !important; /*内容居中，加上 !important 避免被 Markdown 样式覆盖*/ background: rgba(158,188,226,0.2); /*背景色*/&#125; 隔行变色 使用选择器选取复数行设置背景色。一般 Markdown 表格编译后都有 &lt;tbody&gt; 包裹内容，那下面就相当于从表格第二行开始计数 123table tbody tr:nth-child(2n) &#123; background: rgba(158,188,226,0.12); &#125; 悬浮变色 鼠标悬浮时该行改变背景色 123table tr:hover &#123; background: #efefef; &#125; 自适应优化表格用 Markdown 书写，编辑器解析，因而只能在已经生成好的代码上进行自适应优化。 表头不换行 设置表头单元格内容不换行，这样可以通过表头控制该列的最小宽度，避免浏览器窗口缩小时内容被压缩得太紧 123table th &#123; white-space: nowrap; /*表头内容强制在一行显示*/&#125; 首列不换行 表格第一列单元格内容不换行，多数情况下表格首列不应该被压缩换行 123table td:nth-child(1) &#123; white-space: nowrap; &#125; 表格滚动条 添加 JavaScript 代码，用一个 &lt;div&gt; 把表格包裹起来，父元素宽度不足时显示横向滚动条，避免表格撑破布局 1234567[].slice.call(document.querySelectorAll('table')).forEach(function(el)&#123; var wrapper = document.createElement('div'); wrapper.className = 'table-area'; el.parentNode.insertBefore(wrapper, el); el.parentNode.removeChild(el); wrapper.appendChild(el);&#125;) jQuery 1$(\"table\").wrap(\"&lt;div class='table-area'&gt;&lt;/div&gt;\"); 同时添加如下 CSS 123.table-area &#123; overflow: auto;&#125; To be added","tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"},{"name":"Markdown","slug":"Markdown","permalink":"http://yoursite.com/tags/Markdown/"},{"name":"Table","slug":"Table","permalink":"http://yoursite.com/tags/Table/"}]},{"title":"前端工程化工具初选","date":"2016-02-16T10:53:03.000Z","path":"2016/02/16/front-end-tools/","text":"面对日益纷杂的前端工具，作为新人常感无从下手。经过一番检索和简单对比，再结合自己的喜好，筛选了将要学习和使用的工具，以适应日益工程化、专业化的 Web 前端开发工作。 Library &amp; Framework | 库与框架 jQuery jQuery UI: A curated set of user interface interactions, effects, widgets, and themes Vue.js: 数据驱动的组件，为现代化的 Web 界面而生 React.js: A JavaScript library for building user interfaces React Native: A framework for building native apps using React The Build System | 构建工具The Build System is used to build, preview and test your project. gulp.js: Automate and enhance your workflow The Module Bundler | 模块打包器Packs many modules into a few bundled assets. webpack: Take modules with dependencies and generate static assets representing those modules The Package Manager | 包管理The Package Manager is used for dependency management, so that you no longer have to manually download and manage your scripts. npm: Node Package Manager. CSS Extension | CSS 处理Provide an efficient, dynamic, and expressive way to generate CSS. Stylus: Expressive, robust, feature-rich CSS language built for nodejs PostCSS: Transforming styles with JS plugins JavaScript Module | JavaScript 模块化 ECMAScript 6 Module JavaScript Template | JavaScript 模板引擎Generate HTML markup with plain JavaScript. EJS Test Framework | 测试框架 Mocha: a simple, flexible, fun JavaScript test framework for node.js and the browser Chai: a BDD / TDD assertion library for node and the browser that can be delightfully paired with any javascript testing framework The scaffolding tool | 手脚架Scaffolds out a new application, writing your build configuration and pulling in relevant build tasks and package manager dependencies that you might need for your build. Yeoman 集成方案 FIS: 解决前端开发中自动化工具、性能优化、模块化框架、开发规范、代码部署、开发流程等问题 Container | 容器 Docker: Build, Ship, and Run Any App, Anywhere","tags":[]},{"title":"关联 GitHub, 让 Hexo 支持查看文章更新历史","date":"2016-01-10T14:38:01.000Z","path":"2016/01/10/hexo-post-version-control/","text":"前言Hexo 的文章源文件就是一个个 Markdown 文本，自己一直把这些文件备份在 GitHub 上。渐渐发觉，如果只把 GitHub 当作普通网盘，那真是有点大材小用了。于是稍作折腾，成功地把 GitHub 上的备份关联到主题中。现在，在文章文末版权区，可以很方便地跳转查看文章更新记录、历史版本以及下载源文件。 文件处理文件命名 为了便于文章识别和自动关联文件，文章 Markdown 的文件名应该符合规范。 建议使用 文章建立日期.固定链接 YY-MM-DD.permalink.md 的形式。 在文章 [Front-matter] 中设置固定链接 permalink，然后填写文件名，例如本文完整文件名为 2016-01-10.hexo-post-version-control.md 为什么不使用文章标题作为文件名: 一是因为标题偶尔会变动，修改相对麻烦；二是标题可能包含不能用作文件名的符号，导致关联出错。 文件备份 把 hexo/sources/_posts 文件夹同步备份到你的 GitHub 上，不熟悉 Git 的可使用 GitHub Desktop 操作，具体方法自行搜索。 代码添加把下面 EJS 代码添加到主题文章模板合适位置中，Yelee 主题是添加在文末版权区中。参考备份文件在 Github 的链接修改前半部分地址。 yelee/layout/_partial/post/nav.ejsPost Version Control12345678&lt;% if (post.backup != false)&#123; %&gt; &lt;p&gt; &lt;span&gt;更新历史:&lt;/span&gt;&lt;i class=\"fa fa-github\"&gt;&lt;/i&gt; &lt;a href=\"&lt;文章 Blame 地址&gt;/&lt;%= post.date.format(\"YYYY-MM-DD\") %&gt;.&lt;%= post.slug %&gt;.md\" title=\"顺序查看文章各部分修改记录\" target = \"_blank\"&gt;Blame&lt;/a&gt;, &lt;a href=\"&lt;文章 History 地址&gt;/&lt;%= post.date.format(\"YYYY-MM-DD\") %&gt;.&lt;%= post.slug %&gt;.md\" title=\"查看文章有关更新记录\" target = \"_blank\"&gt;History&lt;/a&gt;&lt;span class=\"raw\"&gt;文本模式:&lt;/span&gt;&lt;i class=\"fa fa-file-text-o\"&gt;&lt;/i&gt; &lt;a href=\"&lt;文章 Raw 地址&gt;/&lt;%= post.date.format(\"YYYY-MM-DD\") %&gt;.&lt;%= post.slug %&gt;.md\" title=\"查看 &amp; 下载文章 Markdown 原始文本\" target = \"_blank\"&gt; .md Raw&lt;/a&gt; &lt;/p&gt;&lt;% &#125; %&gt; 代码简析1234567891011&lt;!-- 不设置 backup: false 则默认显示 --&gt;&lt;% if (post.backup != false)&#123; %&gt; &lt;p&gt; &lt;span&gt;更新历史:&lt;/span&gt;&lt;i class=\"fa fa-github\"&gt;&lt;/i&gt; &lt;!-- 不同功能替换前面超链接即可，文件名不变 --&gt; &lt;!-- 文件名生成: &lt;%= post.date.format(\"YYYY-MM-DD\") %&gt;.&lt;%= post.slug %&gt; --&gt; &lt;a href=\"&lt;文章 Blame 地址&gt;/&lt;%= post.date.format(\"YYYY-MM-DD\") %&gt;.&lt;%= post.slug %&gt;.md\" title=\"顺序查看文章各部分修改记录\" target = \"_blank\"&gt;Blame&lt;/a&gt;, &lt;a href=\"&lt;文章 History 地址&gt;/&lt;%= post.date.format(\"YYYY-MM-DD\") %&gt;.&lt;%= post.slug %&gt;.md\" title=\"查看文章有关更新记录\" target = \"_blank\"&gt;History&lt;/a&gt;&lt;span class=\"raw\"&gt;文本模式:&lt;/span&gt;&lt;i class=\"fa fa-file-text-o\"&gt;&lt;/i&gt; &lt;a href=\"&lt;文章 Raw 地址&gt;/&lt;%= post.date.format(\"YYYY-MM-DD\") %&gt;.&lt;%= post.slug %&gt;.md\" title=\"查看 &amp; 下载文章 Markdown 原始文本\" target = \"_blank\"&gt; .md Raw&lt;/a&gt; &lt;/p&gt;&lt;% &#125; %&gt; Blame 顺序列出文章内容，左侧显示各部分 commit 信息，最后修改时间等。 History 列出与该文件相关的更新记录 (commit)，按路径匹配。我一般直接就用提交时间作为 commit 信息了，想要更直观查看变动的可以在提交时书写更完善的 commit 信息。 .md Raw 在线查看或者直接下载文章原始 Markdown 文本。 后记 这是半自动的版本控制，需要手动把文章同步备份到 GitHub； 代码部分的变动基于 Yelee 主题，其它主题用户可以参考 另一篇文章 的方法，自行添加代码到合适位置； 小图标来自 Font Awesome，需主题支持才会正常显示； 本文不详解 Hexo 基础知识，有设置项不理解的请先阅读 Hexo 官方帮助文档。 相关链接 GitHub Desktop: https://desktop.github.com/ Font Awesome: http://fontawesome.io/ Hexo 使用文档: https://hexo.io/zh-cn/docs/ Hexo 文章版本控制 by MOxFIVE on 2016/01/10: https://github.com/MOxFIVE/M-Hexo-Blog/commit/d8a4942dab23920837cc70249c31697d36e49235","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","permalink":"http://yoursite.com/tags/GitHub/"}]},{"title":"为 Hexo 主题添加评论模块 — Disqus, 多说, 友言","date":"2016-01-01T17:26:48.000Z","path":"2016/01/02/hexo-comments/","text":"前言目前自己的主题 Yelee 已支持使用 Disqus, 多说和友言评论，代码逻辑和配置也做了些优化，应该是比较完善了。简单分离整理一下，分享于此，方便大家添加到自己制作或使用的主题中。 文件结构参考以下文件结构把复制的代码和下载的文件放到合适的位置，必要时自行修改文件引用位置。 12345yelee/_config.yml-----/layout/_partial/article.ejs---------------------/comments/disqus.ejs------------------------------/duoshuo.ejs------------------------------/youyan.ejs 文件下载 Hexo 评论模块（Disqus, 多说, 友言）.zip by MOxFIVE 关联模块在合适位置添加以下代码，以便引入评论模块代码。代码使用我比较熟悉的 EJS 书写，使用 Swig, Jade 等其他模板的，请自行转换。 12345678910111213141516171819&lt;% if (!is_home() &amp;&amp; post.comments)&#123; %&gt; &lt;% if (theme.duoshuo.on) &#123; %&gt; &lt;%- partial('comments/duoshuo', &#123; key: post.path, title: post.title, url: config.url+url_for(post.path), &#125;) %&gt; &lt;% &#125; else if (theme.youyan.on) &#123; %&gt; &lt;%- partial('comments/youyan') %&gt; &lt;% &#125; else if (theme.disqus.on) &#123; %&gt; &lt;%- partial('comments/disqus', &#123; shortname: theme.disqus.shortname &#125;) %&gt; &lt;% &#125; else if (config.disqus_shortname) &#123; %&gt; &lt;%- partial('comments/disqus', &#123; shortname: config.disqus_shortname &#125;) %&gt; &lt;% &#125; %&gt;&lt;% &#125; %&gt; 代码简析1234567891011121314151617181920212223242526&lt;!--//如果不是首页且没使用 `comments: false` 关闭评论，则尝试加载评论 --&gt;&lt;% if (!is_home() &amp;&amp; post.comments)&#123; %&gt; &lt;!--//配置中启用多说时，导入相应代码 --&gt; &lt;% if (theme.duoshuo.on) &#123; %&gt; &lt;!--//导入duoshuo.ejs时，同时指定其中几个变量的内容。 --&gt; &lt;%- partial('comments/duoshuo', &#123; key: post.path, title: post.title, url: config.url+url_for(post.path), &#125;) %&gt; &lt;!--//配置中仅启用友言时，导入相应代码 --&gt; &lt;% &#125; else if (theme.youyan.on) &#123; %&gt; &lt;%- partial('comments/youyan') %&gt; &lt;!--//配置中仅启用 Disqus 时，导入相应代码 --&gt; &lt;% &#125; else if (theme.disqus.on) &#123; %&gt; &lt;%- partial('comments/disqus', &#123; shortname: theme.disqus.shortname &#125;) %&gt; &lt;!--//以上皆关闭且 Hexo 配置中设置了 disqus_shortname 时，导入相应代码 --&gt; &lt;% &#125; else if (config.disqus_shortname) &#123; %&gt; &lt;!--//文件分离和变量的使用，使代码能较好的兼容 Hexo 主配置 --&gt; &lt;%- partial('comments/disqus', &#123; shortname: config.disqus_shortname &#125;) %&gt; &lt;% &#125; %&gt;&lt;% &#125; %&gt; 新评论系统添加 如果你想使用畅言或者其他社会化评论系统，并能灵活切换，请参考上文，新加一个 else if 判断引入服务商提供的代码，同时参考后文的配置添加新的设置项。 配置更新在主题中添加以下设置项进行评论功能的配置。评论设置为二级选项，因为之前不少人设置了 duoshuo: true ，结果都进群聊了。要启用某一个评论系统，只需去掉 on 前的 “#”，同时按照说明设置好对应个人账号信息即可。 1234567891011121314151617181920212223242526# &gt;&gt;&gt; Conments 评论系统 &lt;&lt;&lt;# Chose ONE as your comment system and keep others disable.# 选一个作为网站评论系统，其他保持禁用。disqus: #on: true shortname: # https://help.disqus.com/customer/en/portal/articles/466208-what-s-a-shortname- # It is unnecessary to enable disqus here if # you have set \"disqus_shortname\" in your site's \"_config.yml\" duoshuo: #on: true domain: # 是否开启多说评论，http://duoshuo.com/create-site/ # 使用上面网址登陆你的多说，然后创建站点，在 domain 中填入你设定的域名前半部分 # http://&lt;要填的部分&gt;.duoshuo.com (domain只填上&lt;&gt;里的内容，不要填整个网址)youyan: #on: true id: # 是否开启友言评论，http://www.uyan.cc/index.php # id 中填写你的友言用户数字ID，注册后进入后台管理即可查看 # 友言服务在 Web 环境下运行，普通本地环境无法查看，请部署后在线上测试。# &gt;&gt;&gt; &lt;&lt;&lt; 模块代码模块代码已附在下载文件中，在此同时列出备用。依旧是使用 EJS 编写，引入一些信息，设置了几个变量，使用其他模板引擎请自行转换。所有评论模块都设置了 id=&quot;comments&quot;，以便有需要时通过锚点定位跳转到评论区。 Disqus123456789101112131415&lt;section id=\"comments\"&gt; &lt;div id=\"disqus_thread\"&gt;&lt;/div&gt; &lt;script type=\"text/javascript\"&gt; /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */ var disqus_shortname = '&lt;%= shortname%&gt;'; // required: replace example with your forum shortname /* * * DON'T EDIT BELOW THIS LINE * * */ (function() &#123; var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js'; (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); &#125;)(); &lt;/script&gt; &lt;noscript&gt;Please enable JavaScript to view the &lt;a href=\"https://disqus.com/?ref_noscript\"&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;&lt;/section&gt; 多说评论123456789101112131415161718&lt;div class=\"duoshuo\" id=\"comments\"&gt; &lt;!-- 多说评论框 start --&gt; &lt;div class=\"ds-thread\" data-thread-key=\"&lt;%= key%&gt;\" data-title=\"&lt;%= title%&gt;\" data-url=\"&lt;%= url%&gt;\"&gt;&lt;/div&gt; &lt;!-- 多说评论框 end --&gt; &lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt; &lt;script type=\"text/javascript\"&gt; var duoshuoQuery = &#123;short_name:\"&lt;%= theme.duoshuo.domain%&gt;\"&#125;; (function() &#123; var ds = document.createElement('script'); ds.type = 'text/javascript';ds.async = true; ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js'; ds.charset = 'UTF-8'; (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ds); &#125;)(); &lt;/script&gt; &lt;!-- 多说公共JS代码 end --&gt;&lt;/div&gt; 友言评论1234&lt;section class=\"youyan\" id=\"comments\"&gt; &lt;div id=\"uyan_frame\"&gt;&lt;/div&gt; &lt;script src=\"http://v2.uyan.cc/code/uyan.js?uid=&lt;%= theme.youyan.id%&gt;\"&gt;&lt;/script&gt;&lt;/section&gt; 相关链接 多说评论: http://duoshuo.com/ 友言评论: http://www.uyan.cc/ Disqus: https://disqus.com/ refactor: comments code &amp; configuration 评论模块优化 by MOxFIVE on 2016/01/01: https://github.com/MOxFIVE/hexo-theme-yelee/commit/3138ca36bd209fd9f79b60fbb6b15b44673560b5","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}]},{"title":"关于 Hexo 配置文件中的 true 和 false","date":"2016-01-01T15:55:13.000Z","path":"2016/01/01/hexo-config-true-false/","text":"在使用文件 “_config.yml” 对 Hexo 进行配置时，大家习惯于填写 true 和 false 来启用/停用某个功能模块。不过还有几种方法可以表示逻辑真假(boolean)，掌握后可以更灵活地进行功能配置。 false如果配置文件中有一个选项 search_box，那下面几种写法都表示该选项逻辑值为假：false。 即当使用 if (theme.search_box) 进行判断时返回 false. 1－常规写法 1search_box: false 2－前面加 “#”，把该选项变为注释，判断时自然也就 false 了 1#search_box: false 3－用 0 代替。填写 0 时（不含引号），该项会被判断为 false 1search_box: 0 4－选项留空。留空默认也会判断为 false 1search_box: true下面几种写法都表示该选项逻辑值为假：true。即当使用 if (theme.search_box) 进行判断时返回 true. 1－常规写法 1search_box: true 2－用 1 代替。填 1 时，该项会被判断为 true 1search_box: 1 3－填 0 之外的其他字符，通常也会被判断为 true 123search_box: Hexo Yeleesearch_box: 998search_box: \"0\" 后记为了减少误解，在 Yelee 主题的配置中我基本还是使用常规写法。如果大家都能了解这些写法的话，应该能更开心地折腾 Hexo。对配置还有兴趣的，可以去看看 YAML 语法说明，Hexo 的配置文件默认就是使用 YAML 编写。","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}]},{"title":"Anki 记忆库之 Excel 快捷键大全","date":"2015-12-22T15:15:00.000Z","path":"2015/12/22/anki-excel-shortcuts/","text":"前言如果微软 Office 系列套件里只能保留一个，我会选择保留 Excel。只需要学一点基础的 Excel 知识，就能直观地感受到信息技术所带来的高效生产力。有些软件，掌握了它的快捷键，不仅能较全面地了解它的功能，也能极大地提升使用效率。Excel 就属于这类软件。 记忆库使用所有快捷键已整理为 Anki 记忆库，下载后导入即可开始使用。 下载: Excel 快捷键大全 (Windows) for Anki 释义默认中英对照显示，可按需隐藏。 常用快捷键列出自己平时使用最频繁的10个 Excel 快捷键。 - 快捷键 说明 1 CTRL+D 使用“向下填充”命令将选定范围内最顶层单元格的内容和格式复制到下面的单元格中。 2 CTRL+ENTER 使用当前输入的条目填充选定的单元格区域。 3 F2 编辑活动单元格并将插入点放在单元格内容的结尾。如果禁止在单元格中进行编辑，它也会将插入点移到编辑栏中。 4 CTRL+1 显示“单元格格式”对话框。 5 CTRL+SHIFT+~ 应用“常规”数字格式。 6 CTRL+G 显示“定位”对话框。 7 CTRL+` 在工作表中切换显示单元格值和公式。 8 CTRL+’ 将公式从活动单元格上方的单元格复制到单元格或编辑栏中。 9 F4 重复上一个命令或操作（如有可能）。编辑公式时，在绝对引用和相对引用间切换 10 ALT+ENTER 在同一单元格中另起一个新行。 快捷键大全Ctrl 组合快捷键 - 快捷键 说明 1 CTRL+PgUp 向左切换工作表 2 CTRL+PgDn 向右切换工作表 3 CTRL+SHIFT+&amp; 将外框应用于选定单元格。 4 CTRL+SHIFT_ 从选定单元格删除外框。 5 CTRL+SHIFT+~ 应用“常规”数字格式。 6 CTRL+SHIFT+$ 应用带有两位小数的“货币”格式（负数放在括号中）。 7 CTRL+SHIFT+% 应用不带小数位的“百分比”格式。 8 CTRL+SHIFT+^ 应用带有两位小数的“指数”格式。 9 CTRL+SHIFT+# 应用带有日、月和年的“日期”格式。 10 CTRL+SHIFT+@ 应用带有小时和分钟以及 AM 或 PM 的“时间”格式。 11 CTRL+SHIFT+! 应用带有两位小数、千位分隔符和减号 (-)（用于负值）的“数值”格式。 12 CTRL+SHIFT+* 选择环绕活动单元格的当前区域（由空白行和空白列围起的数据区域）。在数据透视表中，它将选择整个数据透视表。 13 CTRL+SHIFT+: 输入当前时间。 14 CTRL+SHIFT+” 将值从活动单元格上方的单元格复制到单元格或编辑栏中。 15 CTRL+SHIFT+Plus (+) 显示用于插入空白单元格的“插入”对话框。 16 CTRL+Minus (-) 显示用于删除选定单元格的“删除”对话框。 17 CTRL+; 输入当前日期。 18 CTRL+` 在工作表中切换显示单元格值和公式。 19 CTRL+’ 将公式从活动单元格上方的单元格复制到单元格或编辑栏中。 20 CTRL+1 显示“单元格格式”对话框。 21 CTRL+2 应用或取消加粗格式设置。 22 CTRL+3 应用或取消倾斜格式设置。 23 CTRL+4 应用或取消下划线。 24 CTRL+5 应用或取消删除线。 25 CTRL+6 在隐藏对象、显示对象和显示对象占位符之间切换。 26 CTRL+8 显示或隐藏大纲符号。 27 CTRL+9 隐藏选定的行。 28 CTRL+0 隐藏选定的列。 29 CTRL+A ☆选择整个工作表。☆如果工作表包含数据，则按 Ctrl+A 将选择当前区域，再次按 Ctrl+A 将选择当前区域及其汇总行，第三次按 Ctrl+A 将选择整个工作表。☆当插入点位于公式中某个函数名称的右边时，则会显示“函数参数”对话框。☆当插入点位于公式中某个函数名称的右边时，按 Ctrl+Shift+A 将会插入参数名称和括号。 30 CTRL+B 应用或取消加粗格式设置。 31 CTRL+C 复制选定的单元格。如果连续按两次 Ctrl+C，则会显示剪贴板。 32 CTRL+D 使用“向下填充”命令将选定范围内最顶层单元格的内容和格式复制到下面的单元格中。 33 CTRL+F 显示“查找和替换”对话框，其中的“查找”选项卡处于选中状态。按 Shift+F5 也会显示此选项卡。 34 SHIFT+F4 重复上一次“查找”操作。 35 CTRL+SHIFT+FCTRL+SHIFT+P 打开“设置单元格格式”对话框，且其中的“字体”选项卡处于选中状态。 36 CTRL+GF5 显示“定位”对话框。 37 CTRL+H 显示“查找和替换”对话框，其中的“替换”选项卡处于选中状态。 38 CTRL+I 应用或取消倾斜格式设置。 39 CTRL+K 为新的超链接显示“插入超链接”对话框，或为选定的现有超链接显示“编辑超链接”对话框。 40 CTRL+N 创建一个新的空白工作簿。 41 CTRL+O 显示“打开”对话框以打开或查找文件。 42 CTRL+SHIFT+O 选择所有包含批注的单元格。 43 CTRL+P 显示“打印”对话框。 44 CTRL+R 使用“向右填充”命令将选定范围最左边单元格的内容和格式复制到右边的单元格中。 45 CTRL+S 使用其当前文件名、位置和文件格式保存活动文件。 46 CTRL+T 显示“创建表”对话框。 47 CTRL+U 应用或取消下划线。 48 CTRL+SHIFT+U 在展开和折叠编辑栏之间切换。 49 CTRL+V 在插入点处插入剪贴板的内容，并替换任何所选内容。只有在剪切或复制了对象、文本或单元格内容之后，才能使用此快捷键。 50 CTRL+ALT+V 显示“选择性粘贴”对话框。只有在剪切或复制了工作表或其他程序中的对象、文本或单元格内容后此快捷键才可用。 51 CTRL+W 关闭选定的工作簿窗口。 52 CTRL+X 剪切选定的单元格。 53 CTRL+Y 重复上一个命令或操作（如有可能）。 54 CTRL+Z 使用“撤消”命令来撤消上一个命令或删除最后键入的内容。 55 CTRL+SHIFT+Z 显示了自动更正智能标记时，可撤消或恢复上一次自动更正操作。 功能键 - 快捷键 说明 1 F1 显示“Microsoft Office Excel 帮助”任务窗格。 2 ALT+F1 创建当前范围中数据的图表。 3 ALT+SHIFT+F1 插入新的工作表。 4 F2 编辑活动单元格并将插入点放在单元格内容的结尾。如果禁止在单元格中进行编辑，它也会将插入点移到编辑栏中。 5 SHIFT+F2 添加或编辑单元格批注。 6 CTRL+F2 显示“打印预览”窗口。 7 F3 显示“粘贴名称”对话框。 8 SHIFT+F3 显示“插入函数”对话框。 9 F4 “重复上一个命令或操作（如有可能）。编辑公式时，在绝对引用和相对引用间切换” 10 Ctrl+F4 关闭选定的工作簿窗口。 11 Ctrl+F5 从最大化中恢复选定工作簿窗口的窗口大小。 12 F6 在工作表、功能区、任务窗格和缩放控件之间切换。在已拆分（通过依次单击“视图”菜单、“管理此窗口”、“冻结窗格”、“拆分窗口”命令来进行拆分）的工作表中，在窗格和功能区区域之间切换时，按 F6 可包括已拆分的窗格。 13 SHIFT+F6 在工作表、缩放控件、任务窗格和功能区之间切换。 14 CTRL+F6 如果打开了多个工作簿窗口，则可切换到下一个工作簿窗口。 15 F7 显示“拼写检查”对话框，以检查活动工作表或选定范围中的拼写。 16 CTRL+F7 如果工作簿窗口未最大化，则可对该窗口执行“移动”命令。使用箭头键移动窗口，并在完成时按 Enter，或按 Esc 取消。 17 F8 打开或关闭扩展模式。在扩展模式中，“扩展选定区域”将出现在状态行中，并且按箭头键可扩展选定范围。 18 SHIFT+F8 使用箭头键将非邻近单元格或区域添加到单元格的选定范围中。 19 CTRL+F8 当工作簿未最大化时，可执行“大小”命令（在工作簿窗口的“控制”菜单上）。 20 ALT+F8 显示用于创建、运行、编辑或删除宏的“宏”对话框。 21 F9 计算所有打开的工作簿中的所有工作表。 22 SHIFT+F9 按 Shift+F9 可计算活动工作表。 23 CTRL+ALT+F9 计算所有打开的工作簿中的所有工作表，不管它们自上次计算以来是否已更改。 24 CTRL+ALT+SHIFT+F9 重新检查相关公式，然后计算所有打开的工作簿中的所有单元格，其中包括未标记为需要计算的单元格。 25 CTRL+F9 将工作簿窗口最小化为图标。 26 F10 “打开或关闭键盘操作提示。当打开提示时箭头键可用于导航。” 27 SHIFT+F10 按 Shift+F10 可显示选定项目的快捷菜单。 28 ALT+SHIFT+F10 显示智能标记的菜单或消息。如果存在多个智能标记，按该组合键可切换到下一个智能标记并显示其菜单或消息。 29 CTRL+F10 最大化或还原选定的工作簿窗口。 30 F11 创建当前范围内数据的图表。 31 SHIFT+F11 按 Shift+F11 可插入一个新工作表。 32 ALT+F11 打开 Microsoft Visual Basic 编辑器，您可以在其中通过使用 Visual Basic for Applications (VBA) 来创建宏。 33 F12 显示“另存为”对话框。 其他实用快捷键 - 快捷键 说明 1 ARROW KEYS 在工作表中上移、下移、左移或右移一个单元格。 2 CTRL+ARROW KEY 移动到工作表中当前数据区域的边缘。 3 SHIFT+ARROW KEY 将单元格的选定范围扩大一个单元格。 4 CTRL+SHIFT+ARROW KEY 按 Ctrl+Shift+箭头键可将单元格的选定范围扩展到活动单元格所在列或行中的最后一个非空单元格，或者如果下一个单元格为空，则将选定范围扩展到下一个非空单元格。 5 BACKSPACE 在编辑栏中删除左边的一个字符。也可清除活动单元格的内容。在单元格编辑模式下，按该键将会删除插入点左边的字符。 6 DELETE 从选定单元格中删除单元格内容（数据和公式），而不会影响单元格格式或批注。在单元格编辑模式下，按该键将会删除插入点右边的字符。 7 END 当 Scroll Lock 处于开启状态时，移动到窗口右下角的单元格。当菜单或子菜单处于可见状态时，也可选择菜单上的最后一个命令。 8 CTRL+END 移动到工作表上的最后一个单元格，即所使用的最下面一行与所使用的最右边一列的交汇单元格。如果光标位于编辑栏中，它会将光标移到文本的末尾。 9 CTRL+SHIFT+END 按 Ctrl+Shift+End 可将单元格选定区域扩展到工作表上所使用的最后一个单元格（位于右下角）。如果光标位于编辑栏中，则按 Ctrl+Shift+End 可选择编辑栏中从光标所在位置到末尾处的所有文本，这不会影响编辑栏的高度。 10 ENTER 从单元格或编辑栏中完成单元格输入，并（默认）选择下面的单元格。打开选定的菜单（按 F10 激活菜单栏），或执行选定命令的操作。在数据表单中，按该键可移动到下一条记录中的第一个字段。在对话框中，按该键可执行对话框中默认命令按钮（带有突出轮廓的按钮，通常为“确定”按钮）的操作。 11 ALT+ENTER 在同一单元格中另起一个新行。 12 CTRL+ENTER 使用当前输入的条目填充选定的单元格区域。 13 SHIFT+ENTER 完成单元格输入并选择上面的单元格。 14 ESC 取消单元格或编辑栏中的输入。关闭打开的菜单或子菜单、对话框或消息窗口。在应用全屏模式时，按该键还可关闭此模式，返回到普通屏幕模式，再次显示功能区和状态栏。 15 HOME 移到工作表中某一行的开头。当 Scroll Lock 处于开启状态时，移到窗口左上角的单元格。当菜单或子菜单处于可见状态时，选择菜单上的第一个命令。 16 CTRL+HOME 移到工作表的开头。 17 CTRL+SHIFT+HOME 将单元格的选定范围扩展到工作表的开头。 18 PAGE DOWN 在工作表中下移一个屏幕。 19 ALT+PAGE DOWN 在工作表中向右移动一个屏幕。 20 CTRL+SHIFT+PAGE DOWN 选择工作簿中的当前和下一个工作表。 21 PAGE UP 在工作表中上移一个屏幕。 22 ALT+PAGE UP 在工作表中向左移动一个屏幕。 23 CTRL+SHIFT+PAGE UP 选择工作簿中的当前和上一个工作表。 24 SPACEBAR 在对话框中，执行选定按钮的操作，或者选中或清除复选框。 25 CTRL+SPACEBAR 选择工作表中的整列。 26 SHIFT+SPACEBAR 选择工作表中的整行。 27 CTRL+SHIFT+SPACEBAR 按 Ctrl+Shift+空格键可选择整个工作表。如果工作表中包含数据，则按 Ctrl+Shift+空格键将选择当前区域，再按一次 Ctrl+Shift+空格键将选择当前区域及其汇总行，第三次按 Ctrl+Shift+空格键将选择整个工作表。当某个对象处于选定状态时，按 Ctrl+Shift+空格键可选择工作表上的所有对象。 28 ALT+SPACEBAR 显示 Microsoft Office Excel 窗口的“控制”菜单。 29 TAB 在工作表中向右移动一个单元格。在受保护的工作表中，可在未锁定的单元格之间移动。在对话框中，移到下一个选项或选项组。 30 SHIFT+TAB 移到前一个单元格（在工作表中）或前一个选项（在对话框中）。 31 CTRL+TAB 在对话框中，按 Ctrl+Tab 可切换到下一个选项卡。 32 CTRL+SHIFT+TAB 在对话框中，按 Ctrl+Shift+Tab 可切换到前一个选项卡。 相关链接 微软 Office 帮助中心: Excel 快捷键和功能键 Microsoft Office Support: Excel shortcut and function keys","tags":[{"name":"Excel","slug":"Excel","permalink":"http://yoursite.com/tags/Excel/"},{"name":"Anki","slug":"Anki","permalink":"http://yoursite.com/tags/Anki/"}]},{"title":"Hexo 最常用的几个命令","date":"2015-12-21T14:12:04.000Z","path":"2015/12/21/common-hexo-commands/","text":".article-entry h2 { border-bottom: none; } Hexo 约有二十个命令，但普通用户经常使用的大概只有下列几个: hexo s1hexo s 启动本地服务器，用于预览主题。默认地址： http://localhost:4000/ hexo s 是 hexo server 的缩写，命令效果一致； 预览的同时可以修改文章内容或主题代码，保存后刷新页面即可； 对 Hexo 根目录 _config.yml 的修改，需要重启本地服务器后才能预览效果。 hexo n1hexo n &quot;学习笔记 六&quot; 新建一篇标题为 学习笔记 六 的文章，因为标题里有空格，所以加上了引号。 文章标题可以在对应 md 文件里改，新建时标题可以写的简单些； hexo n 是 hexo new 的缩写，命令效果一致。 hexo d1hexo d 自动生成网站静态文件，并部署到设定的仓库。 hexo d 是 hexo deploy 的缩写，命令效果一致。 hexo clean1hexo clean 清除缓存文件 db.json 和已生成的静态文件 public。 网站显示异常时可以执行这条命令试试。 hexo g1hexo g 生成网站静态文件到默认设置的 public 文件夹。 便于查看网站生成的静态文件或者手动部署网站； 如果使用自动部署，不需要先执行该命令； hexo g 是 hexo generate 的缩写，命令效果一致。 hexo n page1hexo n page aboutme 新建一个标题为 aboutme 的页面，默认链接地址为 主页地址/aboutme/ 标题可以为中文，但一般习惯用英文； 页面标题和文章一样可以随意修改； 页面不会出现在首页文章列表和归档中，也不支持设置分类和标签。 常用组合12hexo clean &amp;&amp; hexo shexo clean &amp;&amp; hexo d 可以用输入法等软件为这些命令设置快捷键，方便调用。 相关说明 以上命令使用基于 Hexo 3.1.1 版本； 需要删掉用命令新建的文章或页面时，只需要进入 Hexo 根目录下的 source 文件夹，删除对应文件或文件夹即可； 更多命令用法请查询 官方文档。","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}]},{"title":"CSS font-family 网页字体使用小结","date":"2015-12-08T16:33:55.000Z","path":"2015/12/09/css-font-family/","text":"前言一直到最近才开始调整博客的字体，之前都是全站微软雅黑了事。慢慢调整后发现 font-family 这个属性相关的知识还是不少的，整理一下常用的部分，分享于此。 基本用法使用语法12font-family: 字体名1, 字体名2, 字体名n, 字体系列名;font-family: Verdana, Helvetica, \"Microsoft YaHei\", Arial; 语法说明 系统将选择列表中最先可用的字体来显示文字; 因为规则1，通常在最末添加一个 generic-family 字体系列名，保证文字获得相似的显示效果; 因为规则1，西文字体名应该写在中文字体前，这样才能中英文同时使用不同字体; 字体名为中文或包含空格等时，需要加双引号””才能正确识别; 中文字体建议也是用其对应英文字体名，如”微软雅黑”为”Microsoft YaHei”，以提高编码兼容性。 常见字体系列Serif 衬线字体 Times New Roman, Georgia 和宋体都是很常见的衬线字体； 特征: 文字笔划的开始或结束处有额外的装饰，笔划有粗细之分。 Sans-serif 无衬线字体 Arial, Verdana, Tahoma, 微软雅黑都是很常见的无衬线字体; 说明: sans-源于法语前缀，意思为没有。Sans-serif 也就是指无衬线字体。 特征: 字体比较圆滑，笔划较为均匀。 字体选用: 有种说法是正文多用衬线字体，易于区分；标题多用无衬线字体。不过这个也看个人喜好，我更习惯正文用无衬线字体。如果实在不知道怎么选，随便找一个自己看着舒服的网站，套用它的字体样式好了。 Monospace 等宽字体 Courier New, Consolas, Menlo 都是比较常见的等宽字体; 特征: 字母、数字、空格以及其他符号所占宽度都一致。识别度高，易于对齐和定位，通常用于显示代码。 一个优秀的代码字体除了等宽外，还应该能较好地区分出0 o O i l 1 I &quot;&quot; &#39;&#39; [] () {} 等字符。 Cursive 手写体 Comic Sans, Author, 华文行楷都是比较常见的仿手写体; 特征: 模仿人的手写体，笔划圆滑或者有连笔等装饰。英文的花体，中文的行书草书等都属于此类。 获取字体名称同一个字体在不同系统和应用中可能会显示为不同名字，但其内部一般有一个不变的英文名字。CSS font-family 需要引用的就是字体的内部名字。 本地字体 Win 上通过搜索或控制面板进入字体文件夹，然后双击字体查看字体名称; 通过软件，如记事本、Office 等也可以查看字体名字: Mac 上搜索打开字体册即可，中间一栏显示的就是字体名称: 网页字体 审查元素，查看生效的 font-family: 通过 Chrome 插件 WhatFont: 字体图标使用@font-face引入字体后，可以像使用文字那样，无损的控制图标的大小，颜色等样式。常见的有 Webdings，Wingdings, Font Awesome. 备用记录字体配置 下面是自己目前比较常用的字体配置，通常按系列设置为 CSS 预处理器的变量，方便调用。 12345678//中文font-chs = \"Microsoft YaHei\", \"Hiragino Sans GB\", \"WenQuanYi Micro Hei\"//无衬线字体 sans-seriffont-sans = Verdana, \"Helvetica Neue\", Helvetica, Tahoma, Arial//衬线字体 seriffont-serif = Times, Georgia//等宽字体 monospacefont-mono = Menlo, Consolas, \"Source Code Pro\", Inconsolata, Monaco, \"Courier New\" 字体英文名 一些常见中文字体的对应英文名。 .fa-apple { color: #9d9e9d; } .fa-windows { color: #4ca6e7; } - 中文名 英文名 1 苹方 PingFang SC 2 冬青黑/苹果丽黑 Hiragino Sans GB 3 思源黑体 Source Han Sans CN 4 华文细黑 STHeiti Light [STXihei] 5 华文黑体 ST Heiti 6 华文楷体 STKaiti 7 华文宋体 STSong 8 华文仿宋 STFangsong 9 丽黑 Pro LiHei Pro Medium 10 丽宋 Pro LiSong Pro Light 11 标楷体 BiauKai 12 苹果丽中黑 Apple LiGothic Medium 13 苹果丽细宋 Apple LiSung Light 14 新细明体 PMingLiU 15 细明体 MingLiU 16 标楷体 DFKai-SB 17 (中易)黑体 SimHei 18 宋体 SimSun 19 新宋体 NSimSun 20 仿宋 FangSong 21 楷体 KaiTi 22 仿宋_GB2312 FangSong_GB2312 23 楷体_GB2312 KaiTi_GB2312 24 微软正黑体 Microsoft JhengHei 25 微软雅黑 Microsoft YaHei 26 隶书 LiSu 27 幼圆 YouYuan 28 华文中宋 STZhongsong 29 方正舒体 FZShuTi 30 方正姚体 FZYaoti 31 华文彩云 STCaiyun 32 华文琥珀 STHupo 33 华文隶书 STLiti 34 华文行楷 STXingkai 35 华文新魏 STXinwei 36 文泉驿微米黑 Wenquanyi Micro Hei 37 文泉驿正黑 WenQuanYi Zen Hei 38 文泉驿点阵正黑 WenQuanYi Zen Hei Sharp 相关链接 Font Awesome: http://fontawesome.io/ Webdings和Wingdings字符码对应表: http://dwz.cn/2jOjYi CSS魔法堂：再次认识 font by 肥仔John on 2015/3/3: http://www.cnblogs.com/fsjohnhuang/p/4310533.html 有字库-中文在线字体: http://www.youziku.com/ 谈谈网页设计中的字体应用 (2) serif 和 sans-serif by 棕熊 on 2008/5/6: http://www.cnblogs.com/ruxpinsp1/archive/2008/05/06/font-in-front-end-development-2.html Serif 和 Sans Serif 字体的区别 by 冰火九九 on 2013/11/4: http://blog.jobbole.com/50828/ Chinese Web Font Guide by Kendra Schaefer on 2012/6/11: http://www.kendraschaefer.com/2012/06/chinese-standard-web-fonts-the-ultimate-guide-to-css-font-family-declarations-for-web-design-in-simplified-chinese/ Fonts.css – 跨平台中文字体解决方案: http://zenozeng.github.io/fonts.css/","tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"},{"name":"font-family","slug":"font-family","permalink":"http://yoursite.com/tags/font-family/"}]},{"title":"Sublime Text 3 使用配置与插件安装","date":"2015-11-30T13:07:38.000Z","path":"2015/11/30/sublime-config/","text":"记录安装配置 Sublime 的过程，同时列出所用到的插件，方便自己在新系统新电脑上快速用上熟悉的 Sublime。 开始使用软件下载 一直使用的是 Sublime 3，直接转到 3 的 下载页面 好了。 用户设置 Preferences/Settings - User，设置字体为 Consolas 雅黑混合体 yx5g，字号11，tab 转空格，显示空格和制表符。 12345678\"font_face\": \"Yahei Consolas Hybrid\",\"font_size\": 11,\"translate_tabs_to_spaces\": true,\"draw_white_space\": \"all\",/*统一使用 UTF-8 编码和 UNIX 风格的换行符(LF, 0x0A)*/\"default_line_ending\": \"unix\",\"default_encoding\": \"UTF-8\", 其他设置参考 Preferences/Settings - Default。 基础插件Package Control 用于管理插件的插件，基础中的基础。之后列的插件全部通过 Package Control 安装。 插件使用与安装: https://packagecontrol.io/installation Convert​To​UTF8 文本编码自动转换，减少中日韩文乱码问题。 插件安装: Ctrl+Shift+P, Package Control: Installed Packages, 搜索 Convert​To​UTF8 IMESupport 解决输入法选字框不跟随问题。 Side​Bar​Enhancements 自带边栏功能太少，必须安装此插件增强一下。 主题配色Theme - Spacegray Spacegray 主题的 Base16 Eighties Dark 配色方案看着最顺眼，用着最舒服。 代码规范Sublime​Linter 用于管理其他 code linting 代码规范插件。 使用说明: http://sublimelinter.readthedocs.org/en/latest/installation.html#installing-via-pc Sublime​Linter-jshint 基于 JSHint，用于检查规范 JavaScript 代码。 NPM 依赖包: npm install -g jshint使用说明: https://github.com/SublimeLinter/SublimeLinter-jshint Sublime​Linter-csslint 基于 CSSLint，用于检查规范 CSS 代码。 NPM 依赖包: npm install -g csslint使用说明: https://github.com/SublimeLinter/SublimeLinter-csslint Sublime​Linter-contrib-htmlhint 基于 HTMLHint，用于检查规范 HTML 代码。 NPM 依赖包: npm install -g htmlhint@latest使用说明: https://github.com/mmaday/SublimeLinter-contrib-htmlhint 常用插件HTML-CSS-JS Prettify 格式化 HTML, CSS, JavaScript 及 JSON 代码。 Color Highlighter 直接在代码中预览颜色。 Stylus 使代码高亮支持 Stylus。 Stylus Clean Completions Stylus 代码自动补全。 AutoFileName 文件名自动补全。 Can I Use http://caniuse.com/ 的插件版，快速查询 HTML, CSS 等前端技术的浏览器兼容性 BracketHighlighter 调整各类括号匹配的高亮样式 To be added相关链接 Package Control: https://packagecontrol.io/ SublimeLinter: http://sublimelinter.readthedocs.org/ JSHint: http://jshint.com/ CSSLint: https://github.com/CSSLint/csslint HTMLHint: http://htmlhint.com/ Stylus: http://learnboost.github.io/stylus/","tags":[{"name":"Sublime","slug":"Sublime","permalink":"http://yoursite.com/tags/Sublime/"}]},{"title":"Anki 自用卡片模板分享","date":"2015-11-23T12:34:38.000Z","path":"2015/11/23/anki-templates/","text":"前言Anki 是一款卡片式的记忆辅助软件。软件在保持轻巧简洁的同时，各种设置也很丰富。另外， Anki 通过嵌入式的网页来展示卡片，大大增强了卡片样式的自定义功能。下面是目前自己常用的卡片样式代码，有折腾闲情的可以试试。 基础模板标题居中，用不同背景色区分答案类型，设置圆角等样式。 模板使用区域 主要需要填写如图所示4个区域。 正面模板12&lt;img src=\"&#123;&#123;logo&#125;&#125;\" class=\"logo\"/&gt;&lt;div style=\"font-size:2em\"&gt;&#123;&#123;Front&#125;&#125;&lt;/div&gt; 样式12345678910111213141516171819202122232425.card &#123; font-family: 方正中雅宋_GBK; font-size: 1em; text-align:center;&#125;.logo &#123; width: 9em; padding: 2em 0 1em;&#125;.English &#123; font-family: 方正中雅宋_GBK; font-size: 1.5em; text-align: justify; background-color: #ffe4f4; border-radius: .3em; padding: 1em;&#125;.Chinese &#123; font-family: 方正中雅宋_GBK; font-size: 1.5em; text-align: justify; background-color: #edffc4; border-radius: 1.2em .3em; padding: 1em;&#125; 背面模板123456&#123;&#123;FrontSide&#125;&#125;&lt;hr id=answer&gt;&lt;div class= Chinese&gt;&#123;&#123;Chinese&#125;&#125;&lt;/div&gt;&lt;p&gt;&lt;div class= English&gt;&#123;&#123;English&#125;&#125;&lt;/div&gt; 带页脚模板加了页脚，左下显示标签分类信息，右下链接到设定的网址。 模板使用区域 主要需要填写如图所示5个区域。 正面模板1234&lt;div class= item_eng&gt;&#123;&#123;Item_ENG&#125;&#125;&lt;/div&gt;&lt;p class= front&gt;&#123;&#123;Front&#125;&#125;&lt;/p&gt;&lt;p class= title&gt;&#123;&#123;Tags&#125;&#125;&lt;/p&gt;&lt;p class= author&gt;M.ZH&lt;/p&gt; 样式1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465.card &#123; font-family: 方正中雅宋_GBK; font-size: 1em; text-align: center;&#125;.Chinese &#123; font-family: 方正中雅宋_GBK; font-size: 1.5em; text-align: justify; background-color: #edffc4; border-radius: 1.2em 0.3em; padding : 0.5em;&#125;.English &#123; font-family: 方正中雅宋_GBK; font-size: 1.5em; text-align: justify; background-color: #ffe4f4; border-radius: .3em; padding: .5em;&#125;.front &#123; font-size: 1.8em;&#125;.item_eng &#123; padding-top : 5%; color: orange; font-size: 2em; &#125;.tag &#123; display: block; position: fixed; left: 3%; bottom: 0; color: gray; font-size: 1.1em;&#125;a &#123; color: grey;&#125;.title &#123; display: block; position: fixed; left: 3%; bottom: 0; color: gray; font-size: 1em;&#125;.author &#123; display: block; position: fixed; right: 3%; bottom: 0; color: gray; font-size: 1em;&#125;.link &#123; display: block; position: fixed; right: 3%; bottom: 0; color: gray; font-size: 1.1em; font-style: italic;&#125; 背面模板12345678910&lt;div class= item_eng&gt;&#123;&#123;Item_ENG&#125;&#125;&lt;/div&gt;&lt;p&gt;&lt;p class= front&gt;&#123;&#123;Front&#125;&#125;&lt;/p&gt;&lt;hr id= answer&gt;&lt;div&gt;&#123;&#123;image&#125;&#125;&lt;/div&gt;&lt;p class= Chinese&gt;&#123;&#123;Chinese&#125;&#125;&lt;/p&gt;&lt;p&gt;&lt;p class= English&gt;&#123;&#123;English&#125;&#125;&lt;/p&gt;&lt;a href=\"&#123;&#123;Link&#125;&#125;\"&gt;&lt;p class=link&gt;Reference Site&lt;/p&gt;&lt;/a&gt;&lt;p class= tag&gt;&#123;&#123;Tags&#125;&#125;&lt;/p&gt; 字体下载测试了不少字体，感觉 方正中雅宋_GBK 和这个软件最匹配。当然，大家可以自行修改font-family，换用喜欢的字体。","tags":[{"name":"HTML","slug":"HTML","permalink":"http://yoursite.com/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"},{"name":"Anki","slug":"Anki","permalink":"http://yoursite.com/tags/Anki/"}]},{"title":"Git 基础命令与相关术语","date":"2015-11-22T19:01:30.000Z","path":"2015/11/23/git-command/","text":"笔记基本上整理自网站 Try Git，一套很不错的 Git 在线入门教程。 git initTo initialize a Git repository here Directory A folder used for storing multiple files. Repository A directory where Git has been initialized to start version controlling your files. git statusSee what the current state of the project is. staged Files are ready to be committed.unstaged Files with changes that have not been prepared to be committed.untracked Files aren’t tracked by Git yet. This usually indicates a newly created file.deleted File has been deleted and is waiting to be removed from Git. git add &lt;file&gt;Add files to the staging area. Staging Area A place where we can group files together before we “commit” them to Git.Commit add all You can also type git add -A . where the dot stands for the current directory, so everything in and beneath it is added. The -A ensures even file deletions are included. git resetYou can use git reset &lt;filename&gt; to remove a file or files from the staging area. CommitA “commit” is a snapshot of our repository. This way if we ever need to look back at the changes we’ve made (or if someone else does), we will see a nice timeline of all changes. git commit -m “msg” To store our staged changes we run the commit command with a message describing what we’ve changed. ‘-a’ option Auto removes deleted files with the commit. 1git commit -am &quot;msg&quot; git loga journal that remembers all the changes we’ve committed so far git log –summary see more information for each commit. You can see where new files were added for the first time or where files were deleted. It’s a good overview of what’s going on in the project. git remote12git remote add &lt;remote name&gt; &lt;repository URL&gt;git remote add origin https://github.com/try-git/try_git.git Git doesn’t care what you name your remotes, but it’s typical to name your main one origin. It’s also a good idea for your main repository to be on a remote server like GitHub in case your machine is lost at sea during a transatlantic boat cruise or crushed by three monkey statues during an earthquake. git pushTells Git where to put our commits when we’re ready. 12git push -u &lt;remote name&gt; &lt;branch name&gt;git push -u origin master The -u tells Git to remember the parameters, so that next time we can simply run git push. git stashSometimes when you go to pull you may have changes you don’t want to commit just yet. One option you have, other than commiting, is to stash the changes. Use the command git stash to stash your changes, and git stash apply to re-apply your changes after your pull. git pull12git push &lt;remote name&gt; &lt;branch name&gt;git pull origin master Check for changes on remote repository and pull down any new changes. git diffA good overview of changes we have made and lets us add files or directories one at a time and commit them separately. git diff HEAD Show what is different from our last commit. HEAD points to your most recent commit by default. git diff –staged Look at changes within files that have already been staged. git checkout – &lt;target&gt;Changed files back to how they were at the last commit, namely get rid of all the changes since the last commit. --: promise the command line that there are no more options after the ‘–’, avoid switching to the branch of the same name. git branchList local branches of now repository. git branch &lt;name&gt; Create a new branch. When developers are working on a feature or bug they’ll often create a copy (aka. branch) of their code they can make separate commits to. Then when they’re done they can merge this branch back into their main master branch. git checkout &lt;branch&gt; Switch to certain branch. git checkout -b new_branch Checkout and create a branch at the same time. git rm &lt;file&gt;Not only remove the actual files from disk, but will also stage the removal of the files for us. git rm -r folder Recursively remove all folders and files from the given directory. git merge &lt;branch&gt;Merge your changes from the given branch into current branch. Merge Conflicts Merge Conflicts can occur when changes are made to a file at the same time. Reading more on how conflicts are presented. Delete Branchgit branch -d &lt;branch&gt; Delete a local branch. -d won’t let you delete something that hasn’t been merged. -f and -D Force delete the branch that hasn’t been merged. Add the -f(–force) option or use -D which combines -d -f together into one command. Delete Remote Branch12git branch -r -d &lt;remote name&gt;/&lt;branch name&gt;git push &lt;remote name&gt;: &lt;branch name&gt; 12git branch -r -d origin/branch-namegit push origin :branch-name","tags":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}]},{"title":"制作透明背景 PNG 图片和 GIF 动图的几种方法","date":"2015-11-16T14:28:00.000Z","path":"2015/11/16/png-gif-transparency/","text":"偶尔需要将图片的背景透明，渐渐掌握了几种较为简便的处理方法。写篇文章记录一下经验，免得自己哪天又忘了。 PowerPoint → PNG 微软幻灯片工具 PowerPoint 也可以用来简单处理下图片，比如透明化背景。 打开 PowerPoint，新建一张幻灯片页面，然后把待处理的图片拖进去。 依次点击格式选项卡 - 颜色菜单 - 设置透明色 - 点选背景色。这样背景就透明化了，再右键图片另存为 PNG 格式即可。 删除背景功能类似，不过感觉没上面的方式快捷。 PhotoShop → PNG 如果电脑上安了 PhotoShop，那我们可以更灵活地制作透明背景图片。 用 PS 打开待处理的静态图片，双击图层框右侧小锁标志解锁图层; 选用魔棒工具，调整容差为10左右(容差越大，选取的相似颜色越多)，勾选消除锯齿; 点选背景，按键盘del键删除之(按住shitf键可以多选)，之后将图片另存为 PNG 格式即可。 PhotoShop → GIF PhotoShop 用来透明化 GIF 动图背景也是很方便的。 用 PS 打开待处理的 GIF 动图，并确保时间轴窗口已显示(窗口菜单 - 勾选时间轴)； 全选时间轴中的图片(可利用shift键全选)，右键图片，勾选自动(跳过此步生产的动图会有重影)； 点击文件菜单 - 存储为 Web 所用格式...； 在颜色表中，先点选的小星点，再点击下方第一个按钮将背景透明，之后点击存储...保存 GIF 到目标位置即可。 一些成品展示一些已经透明化背景的图片。 拓展阅读 移动端图片格式调研 by ibireme on 2015/11/2: http://blog.ibireme.com/2015/11/02/mobile_image_benchmark/ 解决GIF动画图去背景后出现的重影 by 有烟飘过 on 2010/5/10: http://tieba.baidu.com/p/2106457600","tags":[{"name":"PhotoShop","slug":"PhotoShop","permalink":"http://yoursite.com/tags/PhotoShop/"},{"name":"GIF","slug":"GIF","permalink":"http://yoursite.com/tags/GIF/"},{"name":"PNG","slug":"PNG","permalink":"http://yoursite.com/tags/PNG/"},{"name":"PowerPoint","slug":"PowerPoint","permalink":"http://yoursite.com/tags/PowerPoint/"}]},{"title":"Web Style Guide 前端代码规范","date":"2015-11-08T16:31:45.000Z","path":"2015/11/09/web-style-guide/","text":"在此记录自己已理解并开始遵循的前端代码规范。What How Why General style rulesFilename Start a file name with a letter and avoid numbers:1thousand-and-one-scripts.js Start a filename with a special sign in order to flag it for a special purpose. Lower case in filename: Some operating systems support case sensitive file names and we should not mix the cases to minimize confusion and possible sources for human errors. Separator Use minus (-) sign as separating parts:1234my-script.jsmy-camel-case-name.cssi-love-underscores.htmlmy-script.js For readability purpose. Users may mistake the underscores for spaces, as the underlining in the link hides the underscores; It’s a common separator in canonical URL and URL slugs; Use dot’s to separate the clear purpose of this additional meta-data in a filename: 1my-file.min.css Protocol Omit the protocol portion (http:, https:): 12&lt;script src=\"//cdn.com/foundation.min.js\"&gt;&lt;/script&gt;background: url(//static.example.com/images/bg.jpg) Makes the URL relative—prevents mixed content issues; Saves file size. Text indentation Indent by 4 spaces at a time. Hitting the Tab key in your text editor should generate four space characters rather than one tab character: 1234567&lt;ul&gt; &lt;li&gt;Fantastic&lt;/li&gt; &lt;li&gt;Great&lt;/li&gt; &lt;li&gt; &lt;a href=\"#\"&gt;Test&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt; Make code appearing identical across platforms; Developers can make adjustments to their editing environments a single time. Comments Comment why it was coded this way and comment the thinking behind. Also include links in your comments to open issues, specifications etc. 1234567var offset = 0;if(includeLabels) &#123; // If the labels are included we need to have a minimum offset of 20 pixels // We need to set it explicitly because of the following bug: http://somebrowservendor.com/issue-tracker/ISSUE-1 offset = 20;&#125; Use tools to generates API documentation from comments. JSDoc or YUIDoc Code linting Writing and following a style guide is a good practice but having an automated process that is enforcing it is even better. HTML style rulesDocument type HTML5 (HTML syntax) is preferred for all HTML documents: 1&lt;!DOCTYPE html&gt; Script loading Add your script element just before the body close tag and add them with a async attribute: 12345678910&lt;html&gt; &lt;head&gt; &lt;link rel=\"stylesheet\" href=\"main.css\"&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- body goes here --&gt; &lt;script src=\"main.js\" async&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; On modern browsers, this will asynchronously load the script and don’t wait for CSSOM to complete before loading; On older browsers (IE9-), prevent DOM parser blocking, not affecting the user experience too much. Type attributes Omit type attributes for style sheets and scripts: 12&lt;link rel=\"stylesheet\" href=\"main.css\"&gt;&lt;script src=\"main.js\"&gt;&lt;/script&gt; HTML5 implies text/css and text/javascript as defaults;This can be safely done even for older browsers. ID in Headings Give all headings a ID: 1&lt;h3 id=\"best-practices\"&gt;Best practices&lt;/h3&gt; IDs for anchors, enter the URL to scroll to the position this element. Quotation marks Use double quotation marks (“”) to quote attributes values: 1&lt;div class=\"news-article\"&gt;&lt;/div&gt; 0 values Do not use units after 0 values unless they are required: 12padding-bottom: 0;margin: 0; Shorthand Properties Should be used whenever possible, even in cases where only one value is explicitly set. 123border-top: 0;font: 100%/1.6 palatino, georgia, serif;padding: 0 1em 2em; Useful for code efficiency and understandability. Hexadecimal Notation Use 3 character hexadecimal notation where possible and lower case hex digits: 12color: #f3a;color: #d4ddef; To be continued参考资料 Web Styleguide - Style guide to harmonize HTML, Javascript and CSS / Sass coding style by Gion Kunz on 2014/10/8: https://github.com/gionkunz/chartist-js/blob/develop/CODINGSTYLE.md Isobar Front-end Code Standards by Isobar on 2015/8/25: http://isobar-idev.github.io/code-standards/ [译文] Isobar 前端代码规范 及 最佳实践 by 老码农 on 2015/8/25: http://coderlmn.github.io/code-standards/","tags":[{"name":"HTML","slug":"HTML","permalink":"http://yoursite.com/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"将 Hexo 博客部署到 GitHub Pages","date":"2015-11-04T14:50:51.000Z","path":"2015/11/04/hexo-deployment/","text":"因为还没有一篇教程能让我依次操作后顺利完成部署，索性简单记录自己的操作步骤备用了。 安装 Git 插件Hexo 目前没有自带 Git 部署模块，需手动安装: 1npm install hexo-deployer-git --save 部署配置将博客部署到 GitHub Pages: 12345deploy: type: git message: [message] repo: github: &lt;repository url&gt;,[branch] 12# &lt;!-- 自用地址 --&gt;github: git@github.com:MOxFIVE/MOxFIVE.github.io.git,master Git 个人信息配置漏了这步最后部署可能遇到问题: 1git config --global user.name &quot;用户名&quot; 1git config --global user.email &quot;邮箱地址&quot; 123# &lt;!-- 自用配置 --&gt;git config --global user.name \"MOxFIVE\"git config --global user.email \"mo@outlook.com\" 添加 SSH 公匙为了方便部署时跳过密码一步到位: 生成并进入 SSH 目录 12mkdir ~/.sshcd ~/.ssh 生成密匙，一路回车 1ssh-keygen -t rsa -C &quot;邮件地址&quot; 打开生成的 id_rsa.pub，将其中的 全部 内容复制添加为 GitHub 的 SSH 密匙 1cat id_rsa.pub 部署博客 可省，但先运行这步可避免不少问题 1hexo clean 直接执行hexo d，会自动生成静态文件然后进行部署 1hexo d 首次部署需在弹出框输入 yes 继续，之后畅通无阻 参考资料 Hexo 部署: https://hexo.io/zh-cn/docs/deployment.html hexo-deployer-git: https://github.com/hexojs/hexo-deployer-git 添加 SSH 公钥 by GitCafe on 2015: https://help.gitcafe.com/manuals/help/ssh-key 将Hexo部署到GitCafe by 盛夏 on 2014/9/18: http://www.sumrday.com/2014/09-18-Hello-Hexo.html 让GitCafe项目托管变成外链空间 by 遊離式 on 2012/11/7: http://u-lis.com/archives/2417","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","permalink":"http://yoursite.com/tags/GitHub/"}]},{"title":"用 Excel 生成和管理 Markdown 表格","date":"2015-10-31T10:18:33.000Z","path":"2015/10/31/excel-markdown-table/","text":"前言Markdown 作为一种轻量级的标记语言，用来进行简单的文本排版，确实方便快捷。但 Markdown 标记语言的属性，也使得其在表格处理上略显繁琐且不直观。而 Excel 几乎就是表格的代名词，借助 Excel，可以改善我们在 Markdown 中使用表格的体验。下文将简单介绍怎么使用 Excel 生成和管理可用于 Markdown 文章的表格。 填写表格在 Excel 中正常填写你的表格内容，之后在标题行下插入一行，要居中的填入 :-:，要右对齐的填-:，其它全部填上-。 - 左对齐 居中对齐 右对齐 :-: - :-: -: 1 Left Center Right 2 Left Center Right 3 Left Center Right 如图左上角，表头也不要留空，填上-提高兼容性。 生成表格选中表格，复制，然后粘贴到 Markdown 编辑器中 12345- 左对齐 居中对齐 右对齐:-: :- :-: -:1 Left Center Right2 Left Center Right3 Left Center Right 复制出来的 Excel 默认以tab作为单元格分隔符，而 Markdown 则以|为分隔符。顺理成章，当我们使用 | 对原tab分隔符进行替换后，即可生成 Markdown 化的表格。 12345-|默认左对齐|居中对齐|内容右对齐:-:|-|:-:|-:1|Left|Center|Right2|Left|Center|Right3|Left|Center|Right 表格效果大致如下： - 左对齐 居中对齐 右对齐 1 Left Center Right 2 Left Center Right 3 Left Center Right 处理表格在 Excel 中，处理表格灵活方便，调整好后再按上面方法重新生成表格即可。 可以对表格进行快速拖拽排序； 可以用公式 =row() 给表格添加自动序号； 当然我们也可以使用 Markdown 语法为单元格内容设置格式，添加超链接等； 其他说明 Markdown 默认语法不支持单元格合并，更复杂的表格不适合用在 Markdown 中； 这种写法的表格，目前已知在 GitHub 上不能正确解析； 自用 Windows 和 Mac 软件推荐，这些表格处理经验基本是为了写左边这篇文章而积累的，大家可以看看效果。 顺便推荐一个在线表格生成网站，Tables Generator.com，在上面也可以快速生成通用的 Markdown 表格。使用网站的不便之处就是需要联网，而且这个网站还在[墙外]。","tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://yoursite.com/tags/Markdown/"},{"name":"Excel","slug":"Excel","permalink":"http://yoursite.com/tags/Excel/"},{"name":"Table","slug":"Table","permalink":"http://yoursite.com/tags/Table/"}]},{"title":"让 Hexo 自动生成 Tag Cloud 标签云页面","date":"2015-10-25T04:08:49.000Z","path":"2015/10/25/hexo-tag-cloud/","text":"前言参看上篇 创建404页面 的文章，我们可以轻易地创建一个链接为 http://&quot;主页&quot;/tags/ 的页面，然后编辑对应 .md 文件设置样式。在此基础上，我们还需要在主题 layout 布局中添加代码，引入辅助函数，才能自动生成所需的标签云页面。下面简单介绍下实现过程。 匹配页面在主题文章的 layout 中合适位置插入下列 if 语句，让代码只在标签云页面生效。 1234&lt;!-- page.path 表示不含根路径的页面网址。还有数种方式可以匹配页面，在此不赘述。 --&gt;&lt;% if (page.path === \"tags/index.html\")&#123; %&gt; &lt;引入 tags 页面的代码&gt;&lt;% &#125; %&gt; 以主题 Yelee 为例，须在 /layout/_partial/article.ejs, div article-entry 中插入代码。 12345678910&lt;div class=\"article-entry\" itemprop=\"articleBody\"&gt; &lt;% if (post.excerpt &amp;&amp; index)&#123; %&gt; &lt;%- post.excerpt %&gt; &lt;% &#125; else &#123; %&gt; &lt;% if (page.path === \"tags/index.html\")&#123; %&gt; &lt;引入 tags 页面的代码&gt; &lt;% &#125; %&gt; &lt;%- post.content %&gt; &lt;% &#125; %&gt;&lt;/div&gt; 插入标签云使用 Hexo 辅助函数 &lt;%- tagcloud([tags], [options]) %&gt; 插入标签云，参数详解请查看 官方文档。 12345678&lt;%- tagcloud(&#123; min_font: 16, max_font: 35, amount: 999, color: true, start_color: 'gray', end_color: 'black',&#125;) %&gt; 自定义样式审查元素，按需修改相关样式。下面是目前本博客 标签云页面 所添加的代码，附上供参考。 /layout/_partial/article.ejstag cloud page123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;% if (page.path === \"tags/index.html\")&#123; %&gt; &lt;hr&gt; &lt;br&gt; &lt;%- list_categories(&#123; depth: 1, &#125;) %&gt; &lt;div class=\"tags\"&gt; &lt;%- tagcloud(&#123; min_font: 16, max_font: 35, amount: 999, color: true, start_color: 'gray', end_color: 'black', &#125;) %&gt; &lt;/div&gt; &lt;style&gt; .category-list li&#123; display: inline-block; margin: 0 1em .5em 0; padding: 4px; border: 1px solid lightgray; font-size: 1.2em; &#125; .category-list a &#123; color: gray; &#125; .category-list-item:hover a &#123; color: gray; text-decoration: none; font-weight: bold; &#125; .category-list-count &#123; margin-left: 2px; font-size: .9em; &#125; .article-entry ul li:before&#123; display: none; &#125; .article-inner &#123; text-align: center; &#125; .tags &#123; max-width: 40em; margin: 2em auto; margin-top: 0em; &#125; .tags a &#123; margin-right: 1em; border-bottom: 1px solid gray; line-height: 65px; white-space: nowrap; &#125; .tags a:hover &#123; border-bottom: 2px solid black; font-style: italic; text-decoration: none; &#125; &lt;/style&gt;&lt;% &#125; %&gt; 知道怎么在特定页面中引入 Hexo 自带的函数和变量后，大家应该就可以比较自在地在文章中引入需要的内容了，标签列表，文章列表，文章地址，日期时间等都可以。 参考资料 tagcloud: 插入标签云 by Hexo on 2015: https://hexo.io/zh-cn/docs/helpers.html#tagcloud 变量使用 by Hexo on 2015: https://hexo.io/zh-cn/docs/variables.html feat: tags cloud page 标签云页面 by MOxFIVE on 2015/10/12: https://github.com/MOxFIVE/hexo-theme-yelee/commit/3a82bb65b325826b3f71cae10e39e5314ccb63cb 统计分类及标签数 by MOxFIVE on 2015/12/1: https://github.com/MOxFIVE/hexo-theme-yelee/commit/56abe4226454571335a62120ab404792f274437f","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"TagCloud","slug":"TagCloud","permalink":"http://yoursite.com/tags/TagCloud/"}]},{"title":"在 Hexo 中创建匹配主题的404页面","date":"2015-10-15T16:23:39.000Z","path":"2015/10/16/hexo-404-page/","text":"通常，对于绑定了顶级域名的 Hexo 博客来说，只需在所用主题的source文件夹下新建一个404.html文件，再生成部署到云端，即可生成博客404页面。但这种方法生成的页面是孤立的，下面介绍一种生成匹配主题的404页面的方法。 新建404页面 启动 Git Bash，进入 Hexo 所在文件夹，输入 hexo new page 404 ; 打开刚新建的页面文件，默认在 Hexo 文件夹根目录下 /source/404/index.md； 在顶部插入一行，写上permalink: /404，这表示指定该页固定链接为 http://&quot;主页&quot;/404.html 12345title: 404 Not Found：该页无法显示toc: falsecomments: falsepermalink: /404--- 自定义页面样式 经过上面的设置后，404界面已生效，其编辑方式与一般文章无异。我们可以在.md文件正文中插入一些 CSS 样式，使得该页面与博客中的一般文章有所区别。下面是我个人为配合本博客主题所设置的一些样式，仅供参考，具体修改自行审查所用主题。 http://moxfive.xyz/举个404页面栗子 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162title: 404 Not Found：该页无法显示toc: falsecomments: falsepermalink: /404---&lt;style type=\"text/css\"&gt; .article-header &#123; padding: 0; padding-top: 26px; border-left: none; text-align: center; &#125; .article-header:hover &#123; border-left: none; &#125; .article-title &#123; font-size: 2.1em; &#125; strong a &#123; color: #747474; &#125; .article-meta &#123; display: none; &#125; .share &#123; display: none; &#125; .ds-meta &#123; display: none; &#125; .player &#123; margin-left: -10px; &#125; .sign &#123; text-align: right; font-style: italic; &#125; #page-visit &#123; display: none; &#125; .center &#123; text-align: center; height: 2.5em; font-weight: bold; &#125; .article-entry hr &#123; margin: 0; &#125; .pic &#123; text-align: center; margin: 0; &#125; .pic br &#123; display: none; &#125; #container .article-info-post.article-info &#123; display: none; &#125; #container .article .article-title &#123; padding: 0; &#125;&lt;/style&gt; 参考资料 Custom 404 Pages by GitHub Help on 2015: https://help.github.com/articles/custom-404-pages/","tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"},{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}]},{"title":"多说样式折腾记录 — 添加 UA 浏览器标识、旋转头像等","date":"2015-09-28T17:24:41.000Z","path":"2015/09/29/duoshuo-style/","text":"前言简单记录自己个性化多说样式的过程，参考的教程和借鉴的代码基本包含在 参考资料 列表中，有不明白的可以试着查阅这些资料。 相关下载 自用完整多说 CSS 样式文件: duosuo.css by MOxFIVE自用多说 embed-js 文件: embed-js by MOxFIVE UA 浏览器标识 本地化 embed-js 1. 先下载我修改好的 embed.js，文件源于网页分享，稍作调整: 去掉了略显累赘的浏览器版本号； 修改了部分浏览器和系统的图标。 2. 获取多说数字 ID: 访问 多说后台，点击左侧你头像旁的昵称，之后会跳转到你的多说主页http://duoshuo.com/profile/你的数字ID/，最后那几个数字就是你的数字 ID，记下备用。 3. 个人化 embed.js: 将 e.user_id 的值修改为你的多说数字 ID。 123function sskadmin(e) &#123; var ssk = ''; if (e.user_id == 你的多说数字ID) 4. 云端化 embed.js: 让你的专属 embed.js 能通过一个网址访问。 Hexo 博客的话，假设你把 embed.js 放到 /themes/&lt;主题名字&gt;/source/js/ 文件夹下，部署云端后，你的文件地址就是 博客地址/js/embed.js。 5. 修改多说调用地址: 修改多说代码中的 ds.src 为你的 embed.js 地址； 主题 Yelee (v3.0) 在 yelee/layout/_partial/comments/duoshuo.ejs 里修改。 123456789101112var duoshuoQuery = &#123;short_name:\"&lt;%=theme.duoshuo%&gt;\"&#125;;(function() &#123; var ds = document.createElement('script'); ds.type = 'text/javascript';ds.async = true; ds.src = 'http://moxfive.xyz/resources/embed.js'; /*上面是我自己的 embed.js 链接，请改为你自己的地址*/ ds.charset = 'UTF-8'; (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ds);&#125;)(); 引入 Font Awesome 这里介绍下最快捷的方式，把下面代码放入对应 HTML head 头部即可。例如 Hexo 博客主题的通常是在 layout 文件夹下的 Head 文件中引入 [G]。 主题 Yelee 和 Yilia 已自带 Font Awesome，无需再引入。 1&lt;link rel=\"stylesheet\" href=\"//cdn.bootcss.com/font-awesome/4.6.3/css/font-awesome.min.css\"&gt; 添加对应 CSS 拷贝以下代码到多说 后台自定义 CSS 框中保存。在网友分享基础上设置了透明度，没那么刺眼花哨了，顺便改了一下未识别 UA 的样式。 CSS 有点繁琐，不清楚如何为这些 UA 设置 Class，只好一个个分开写了。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228span.ua &#123; display: inline-block !important; margin: auto 1px .3em !important; color: #fff !important;&#125;.os_other &#123; background-color: #bdb2a7!important; color: #fff; border: 1px solid #BBB!important; border-radius: 4px; padding: 0 5px!important; opacity: .4;&#125;.ua_other &#123; background-color: #bdb2a7!important; color: #fff; border: 1px solid #BBB!important; border-radius: 4px; padding: 0 5px!important; opacity: .4;&#125;.ua_other &#123; opacity: 1;&#125;.os_other:hover &#123; opacity: 1;&#125;.ua_ie &#123; background-color: #428bca!important; border-color: #357ebd!important; border-radius: 4px; padding: 0 5px!important; opacity: .4;&#125;.ua_ie:hover &#123; opacity: 1;&#125;.ua_firefox &#123; background-color: #f0ad4e!important; border-color: #eea236!important; border-radius: 4px; padding: 0 5px!important; opacity: .4;&#125;.ua_firefox:hover &#123; opacity: 1;&#125;.ua_maxthon &#123; background-color: #7373B9!important; border-color: #7373B9!important; border-radius: 4px; padding: 0 5px!important; opacity: .4;&#125;.ua_maxthon:hover &#123; opacity: 1;&#125;.ua_ucweb &#123; background-color: #FF740F!important; border-color: #d43f3a!important; border-radius: 4px; padding: 0 5px!important; opacity: .4;&#125;.ua_ucweb:hover &#123; opacity: 1;&#125;.ua_sogou &#123; background-color: #78ACE9!important; border-color: #4cae4c!important; border-radius: 4px; padding: 0 5px!important; opacity: .4;&#125;.ua_sogou:hover &#123; opacity: 1;&#125;.ua_2345explorer &#123; background-color: #2478B8!important; border-color: #4cae4c!important; border-radius: 4px; padding: 0 5px!important; opacity: .4;&#125;.ua_2345explorer:hover &#123; opacity: 1;&#125;.ua_2345chrome &#123; background-color: #F9D024!important; border-color: #4cae4c!important; border-radius: 4px; padding: 0 5px!important; opacity: .4;&#125;.ua_2345chrome:hover &#123; opacity: 1;&#125;.ua_mi &#123; background-color: #FF4A00!important; border-color: #4cae4c!important; border-radius: 4px; padding: 0 5px!important; opacity: .4;&#125;.ua_mi:hover &#123; opacity: 1;&#125;.ua_lbbrowser &#123; background-color: #FC9D2E!important; border-color: #4cae4c!important; border-radius: 4px; padding: 0 5px!important; opacity: .4;&#125;.ua_lbbrowser:hover &#123; opacity: 1;&#125;.ua_chrome &#123; background-color: #EE6252!important; border-color: #4cae4c!important; border-radius: 4px; padding: 0 5px!important; opacity: .4;&#125;.ua_chrome:hover &#123; opacity: 1;&#125;.ua_qq &#123; background-color: #3D88A8!important; border-color: #4cae4c!important; border-radius: 4px; padding: 0 5px!important; opacity: .4;&#125;.ua_qq:hover &#123; opacity: 1;&#125;.ua_apple &#123; background-color: #E95620!important; border-color: #4cae4c!important; border-radius: 4px; padding: 0 5px!important; opacity: .4;&#125;.ua_apple:hover &#123; opacity: 1;&#125;.ua_opera &#123; background-color: #d9534f!important; border-color: #d43f3a!important; border-radius: 4px; padding: 0 5px!important; opacity: .4;&#125;.ua_opera:hover &#123; opacity: 1;&#125;.os_vista,.os_2000,.os_windows,.os_xp,.os_7,.os_8,.os_8_1 &#123; background-color: #39b3d7!important; border-color: #46b8da!important; border-radius: 4px; padding: 0 5px!important; opacity: .4;&#125;.os_vista:hover,.os_2000:hover,.os_windows:hover,.os_xp:hover,.os_7:hover,.os_8:hover,.os_8_1:hover &#123; opacity: 1;&#125;.os_android &#123; background-color: #98C13D!important; border-color: #01B171!important; border-radius: 4px; padding: 0 5px!important; opacity: .4;&#125;.os_android:hover &#123; opacity: 1;&#125;.os_ubuntu &#123; background-color: #DD4814!important; border-color: #01B171!important; border-radius: 4px; padding: 0 5px!important; opacity: .4;&#125;.os_ubuntu:hover &#123; opacity: 1;&#125;.os_linux &#123; background-color: #3A3A3A!important; border-color: #1F1F1F!important; border-radius: 4px; padding: 0 5px!important; opacity: .4;&#125;.os_linux:hover &#123; opacity: 1;&#125;.os_mac &#123; background-color: #666666!important; border-color: #1F1F1F!important; border-radius: 4px; padding: 0 5px!important; opacity: .4;&#125;.os_mac:hover &#123; opacity: 1;&#125;.os_unix &#123; background-color: #006600!important; border-color: #1F1F1F!important; border-radius: 4px; padding: 0 5px!important; opacity: .4;&#125;.os_unix:hover &#123; opacity: 1;&#125;.os_nokia &#123; background-color: #014485!important; border-color: #1F1F1F!important; border-radius: 4px; padding: 0 5px!important; opacity: .4;&#125;.os_nokia:hover &#123; opacity: 1;&#125;/*UA End*/ 显示博主标记 分别添加以下代码到你的 embed.js 文件和多说自定义 CSS ，自己多说账户的评论旁将显示博主标记。如果你用的是我上面提供的 embed.js，那修改好 e.user_id 时博主标记应该已经显示了。 12345678910111213141516/*博主标记: 添加到 embed.js*/function sskadmin(e) &#123; var ssk = ''; if (e.user_id == 你的多说数字ID) &#123; if (checkMobile()) &#123; ssk = '&lt;span class=\"ua\"&gt;&lt;span class=\"sskadmin\"&gt;博主&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;'; &#125; else &#123; ssk = '&lt;span class=\"ua\"&gt;&lt;span class=\"sskadmin\"&gt;博主&lt;/span&gt;&lt;/span&gt;'; &#125; &#125; else &#123; if (checkMobile()) &#123; ssk = '&lt;br&gt;&lt;br&gt;'; &#125; &#125; return ssk;&#125; 1234567891011/*博主标记 CSS*/.sskadmin &#123; background-color: #00a67c!important; border-color: #01B171!important; border-radius: 4px; padding: 0 5px!important; opacity: .4;&#125;.sskadmin:hover &#123; opacity: 1;&#125; 个性化 CSS 样式 通过网友教程，官方文档和审查元素工具个性化多说 CSS 样式。 旋转头像 源于网友分享，修改了旋转度数，动画时间，内边距。 123456/*头像样式*/#ds-reset .ds-avatar&#123;background:none !important; box-shadow:none !important;&#125;#ds-reset .ds-avatar img , #ds-thread #ds-reset ul.ds-children .ds-avatar img&#123;width:50px !important;height: 50px !important;-webkit-transition: .9s;-moz-transition: .9s;-o-transition: .9s;-ms-transition: .9s;padding: 2px;border: 1px solid #ddd;background: #fff;&#125;/*鼠标悬停旋转头像*/.ds-post:hover .ds-avatar img&#123;transform:rotate(360deg);-webkit-transform:rotate(360deg);-moz-transform:rotate(360deg);-o-transform:rotate(360deg);-ms-transform:rotate(360deg);border-radius:30px !important;&#125;#ds-reset .ds-avatar img:hover&#123;transform:rotate(360deg);-webkit-transform:rotate(360deg);-moz-transform:rotate(360deg);-o-transform:rotate(360deg);-ms-transform:rotate(360deg);border-radius:30px !important;&#125; 通用样式 源于网友分享。 123456789101112131415161718192021222324252627282930#ds-thread #ds-reset .ds-comment-body, #ds-thread #ds-reset ul.ds-children .ds-comment-body&#123;padding-left:70px !important;&#125;#ds-thread #ds-reset .ds-comment-body, #ds-thread #ds-reset ul.ds-children .ds-comment-body&#123;padding-left:70px !important;&#125;.ds-post:hover&#123;background:#eee !important;&#125;#ds-thread #ds-reset ul.ds-children .ds-avatar&#123;width:50px !important;&#125;#ds-thread #ds-reset .ds-replybox&#123;padding: 0 0 0 80px !important;&#125;#ds-reset #ds-ctx .ds-ctx-entry .ds-ctx-body&#123;margin-left: 68px !important;&#125;#ds-recent-comments li.ds-comment:nth-of-type(1)&#123;border:none !important;&#125;#ds-thread&#123; border-radius: 3px;&#125;/** 多说最近留言样式 **/#ds-recent-comments .ds-avatar img&#123; width:54px;height:54px; border-radius: 50%; -webkit-border-radius: 50%; -moz-border-radius:50%; box-shadow: inset 0 -1px 0 #3333sf;/*设置图像阴影效果*/ -webkit-box-shadow: inset 0 -1px 0 #3333sf; -webkit-transition: 0.4s; -webkit-transition: -webkit-transform 0.4s ease-out; transition: transform 0.4s ease-out; -moz-transition: -moz-transform 0.4s ease-out; &#125; #ds-recent-comments .ds-avatar img:hover&#123; box-shadow: 0 0 10px #fff; rgba(255,255,255,.6), inset 0 0 20px rgba(255,255,255,1); -webkit-box-shadow: 0 0 10px #fff; rgba(255,255,255,.6), inset 0 0 20px rgba(255,255,255,1); transform: rotateZ(360deg); -webkit-transform: rotateZ(360deg); -moz-transform: rotateZ(360deg); &#125; 喜欢按钮样式 透明度，背景，边框等样式调整。 12345678910111213.ds-meta &#123; opacity: .5; &#125;.ds-meta:hover &#123; opacity: 1; &#125;#ds-thread #ds-reset a.ds-like-thread-button &#123; background-image: none; background-color: #fee2d3; border: none; text-shadow: none; font-family: inherit; &#125; 社交账号登陆透明度123456#ds-thread #ds-reset .ds-login-buttons &#123; opacity: .5;&#125;#ds-thread #ds-reset .ds-login-buttons:hover &#123; opacity: 1; &#125; 评论、文本框字体 默认字体偏小，稍作调整。 12345#ds-thread #ds-reset .ds-comment-body p, #ds-thread #ds-reset .ds-textarea-wrapper textarea &#123; font-size: 1.15em; color: #717171; font-family: inherit; &#125; 用户名等超链接颜色123#ds-thread #ds-reset .ds-highlight &#123; color: #ef7c6c !important;&#125; 未登录用户名字颜色 颜色与其他登陆用户保持一致； 123#ds-thread #ds-reset .ds-user-name &#123; color: #ef7c6c !important;&#125; 评论框背景图片 选择合适大小的图片即可，带透明背景的更好。 12#ds-thread #ds-reset .ds-textarea-wrapper textarea &#123;background: url(\"/resources/Mihawk-s.png\") bottom right no-repeat;&#125; 评论框背景123#ds-thread #ds-reset .ds-textarea-wrapper &#123; background: rgba(255, 255, 255, .5);&#125; 工具栏背景123#ds-reset .ds-gradient-bg &#123; background: rgba(255, 255, 255, .5);&#125; “发布”按钮背景 去掉背景图，修改底色，去掉文字阴影。 12345#ds-thread #ds-reset .ds-post-button &#123; background-image: none; background: rgba(136, 172, 219, .2); text-shadow: none;&#125; 评论列表背景123456#ds-thread #ds-reset li.ds-post &#123; background: rgba(255, 255, 255, .2);&#125;#ds-thread #ds-reset li.ds-post:hover &#123; background-color: rgba(255, 255, 255, .6) !important;&#125; 评论数标签123#ds-thread #ds-reset li.ds-tab a.ds-current &#123; background: rgba(255, 255, 255, .2);&#125; 多说账户设置 在多说网站后台做的一些个性化设置。http://多说用户名.duoshuo.com/admin/settings 评论显示方式 比较喜欢嵌套模式，最大层数设为３，评论每页最多30条。 过滤机制 启用”Akismet智能过滤”，等再过一阵子公开博客后大概能用上吧。 默认头像 不大喜欢多说默认未登录访客的头像，修改为 QQ 匿名头像。 参考资料 多说CSS修改 by 多说团队 on 2012: http://dev.duoshuo.com/docs/4ff1cfd0397309552c000017 Font Awesome: http://fontawesome.io/ 多说自定义CSS动感头像和多说评论显示User Agent的那些小事 by wsgzao on 2015/04/23: http://wsgzao.github.io/post/duoshuo/ 我的多说CSS样式分享 by 赵小萌_Moe on 2015/01/29: http://myhloli.com/duoshuo-css.html 多说评论框UA显示/博主标记 by 赵小萌_Moe on 2015/02/22: http://myhloli.com/duoshuo-ua-and-admin-tab.html 多说评论框各种CSS自定义设置问题收集 by 欲思 on 2014/04/22: http://yusi123.com/2689.html","tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"},{"name":"多说","slug":"多说","permalink":"http://yoursite.com/tags/多说/"},{"name":"UA","slug":"UA","permalink":"http://yoursite.com/tags/UA/"},{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}]},{"title":"自用 Windows 和 Mac 软件推荐","date":"2015-09-19T16:00:00.000Z","path":"2015/09/20/windows-mac-software/","text":"前言罗列自己正在使用的 Windows 和 Mac OS 软件，基本上都是同类中能较好满足个人需求的软件，作表记录，方便自己检索，也顺便推荐给大家。 软件分类说明 编程开发: 目前写代码用到的一些软件； 网络应用: 依赖于网络运行的软件，比如浏览器，聊天软件，下载工具等； 文档处理: 查看和处理 Word, Excel, PDF 等文档； 影音图像: 查看和处理多媒体文件，比如看图，听歌，视频处理等； 系统工具: 增强、个性化系统或者系统自带软件的功能，比如资源管理器增强，任务栏个性化等； 应用软件: 不属于以上分类的软件； 表格内容解释 表格依次列出软件名字，开发商，系统，付费，备注，默认使用软件的最新版本。 表头英文: 用不留空的英文单词表示，避免默认设置下表头被换行； 系统栏打 √ : 主要在该系统下使用该软件，少数双系统下都频繁使用； 系统栏标 — : 该软件不支持该系统； Free 免费栏 : 标 x 该软件为付费共享软件；标 — 表示提供免费版，但功能等有所限制。 链接: 点击软件名字跳转到软件主页，点开发商跳转到对其介绍页面或者对应官网。 Note 备注: 软件用途简单介绍 编程开发 - SoftwareName Developer Mac Win Free Note 1 GitHub Desktop GitHub, Inc. √ GitHub 桌面版 2 Sublime Text 3 Jon Skinner √ — 代码编辑器 3 Brackets Adobe Systems √ Web 代码编辑器 4 Dash Kapeli √ — x API Snippet 代码管理 5 Flux V Escapers Ltd. √ — x 可视化网页开发 6 XAMPP Apache Friends √ PHP 开发环境，本地 WordPress 7 Git Linus Torvalds √ Distributed version control system 8 ColorSnapper Koolesache √ — x 屏幕取色器 9 Node.js Joyent, Inc. √ √ JavaScript runtime 网络应用 - SoftwareName Developer Mac Win Free Note 1 Chrome 谷歌 √ 主力浏览器，插件脚本扩展 2 QQ 腾讯 √ √ — 万年隐身 3 ShadowsocksX clowwindy √ √ 和FQ谐 4 Thunder Store 迅雷网络 √ — 检查应用更新 5 阿里旺旺 阿里巴巴集团 √ 买买买 6 坚果云 上海亦存网络 √ √ — 文档同步，备用 7 迅雷 迅雷网络 √ √ — 极速版，离线下载和高速通道 8 FLVCD 硕鼠 √ 网络视频下载 9 微信 腾讯 √ 聊胜于无 10 Maxthon 傲游 傲游天下 √ 备用 11 百度云管家 百度 √ — 搜集、分享资源 12 ADSafe 净网大师 大摩网络 — √ 网页、视频广告屏蔽 13 网易云音乐 网易公司 √ — 看评论听歌，发现好歌 14 360云盘 奇虎360 √ — 主力同步软件，容量足够，带历史版本，文件数量不限 15 TeamViewer TeamViewer GmbH √ √ 远程桌面控制 16 Reeder 3 Silvio Rizzi √ — x RSS 订阅 文档处理 - SoftwareName Developer Mac Win Free Note 1 Endnote Thomson Reuters √ √ Reference 文献管理 2 Office 2016 微软公司 √ Word , Excel, PowerPoint, OneNote 3 Nitro PDF Pro Nitro √ PDF编辑 4 印象笔记 Evernote √ — 网文搜集 5 Calibre Kovid Goyal √ 电子书管理 6 Mou 25.io Inc √ — Markdown 编辑器 7 Sigil John Schember √ epub 电子书制作 8 XMind XMind Ltd. √ x 思维导图制作 9 FileLocator Mythicsoft Ltd. — √ — 全文检索工具 支持正则表达式 10 福昕阅读器 福昕软件 — √ PDF 阅读器 11 Everything David Carpenter — √ 文件名搜索 12 PSP Comic Helper 鱼蛋 — √ 漫画分割转换 13 字幕转换助手 poseidon — √ — 多格式字幕互转 14 PDFBinder — √ PDF 合并工具 15 MoodPad — √ 追月文本处理 i254 16 拖把更名器 — √ 批量重命名 17 ANSI2Unicode 小熏 — √ CUE 乱码修复，编码转换 18 SrtEdit 袁卫国 — √ 字幕编辑器 19 Subindex 火鸟 — √ 火鸟字幕合并 系统工具 - SoftwareName Developer Mac Win Free Note 1 Clover 易捷科技 — √ 多标签资源管理器 2 Listary Bopsoft — √ x 资源管理器增强 3 StrokeIt Jeff Doozan — √ 鼠标手势 4 Alfred Running with Crayons √ — — 搜索快捷键增强 5 Bartender Surtees Studios √ — — 任务栏瘦身 6 BetterTouchTool Andreas Hegenberg √ — 触控板手势 7 ClipMenu Naotaka Morimoto √ — — 剪贴板增强 8 Day-O Shaun Inman √ — 菜单栏日历 9 PopClip Pilotmoon √ — x 弹出菜单 效率 鼠标 10 Total Manager etinysoft √ — x Finder 增强 11 XtraFinder Tran Ky Nam √ — Finder 增强 12 Unclutter Eugene Krupnov √ — x 临时存储，替代桌面 13 DirectX Repair — √ DLL 修复 14 iStat Menus Bjango Pty Ltd. √ — x 系统与硬件监控 15 NTFS for Mac Paragon Software Group √ — x 磁盘格式兼容 16 软媒时间 软媒 — √ 任务栏时间 农历 天气 17 通用PE工具箱 UEPON — √ v5.0 系统安装 18 Disk Speed Test Blackmagic Design Inc √ — 硬盘测速 19 FolderSizes Key Metric Software — √ x 文件夹、文件空间占用分析 20 Recuva Piriform — √ x 数据恢复 21 GoodSync Siber Systems Inc. √ x 本地文件同步 22 CheatSheet √ — 快捷键显示 23 AppCleaner FreeMacSoft √ — 卸载应用程序 24 CleanMyMac MacPaw Inc. √ x 清理优化 影音图像 - SoftwareName Developer Mac Win Free Note 1 Media Preview 博语软件 — √ 资源管理器 视频缩略图 2 CUE Splitter Medieval Software — √ 无损音乐分割 3 Mp3tag Florian Heidenreich — √ MP3标签修改 去乱码 4 PotPlayer Daum Communications — √ 视频播放 5 2345看图王 2345.com — √ 图片浏览 6 魔方图标大师 软媒 — √ 图标处理 7 全能音频转换通 — √ v1.2 8 Adobe Photoshop Adobe Systems √ x 图像处理 9 ArcSoft Photo+ ArcSoft √ — 图片浏览 10 Inpaint Maxim Gapchenko √ x 抠图，去背景 11 ScreenFlow Telestream, Inc. √ — x 屏幕录制 12 FastStone Capture FastStone Soft — √ x 截图 13 SplitIt poseidon — √ — 影音剪切合并 14 Xee Dag Ågren √ — x 图片浏览 15 GIF动画录制精灵 水淼软件 — √ 16 MangaMeeya Manga Underground — √ 漫画阅读 17 PhotoZoom BenVista Ltd. √ x 图片无损缩放 18 Snip 腾讯 √ — 截图 19 Covered Rob Heague √ — 专辑封面下载 20 MediaCoder Stanley Huang — √ 音视频转码 21 MKVToolnix Moritz Bunkus √ 视频音频字幕处理 22 iSmartPhoto Chi Lin √ — x 图片管理 23 CollageIt PearlMountain √ 拼图 24 暴风影音 暴风科技 √ Mac 版很简洁 25 MPlayerX Zongyao Qu √ — 视频播放 应用软件 - SoftwareName Developer Mac Win Free Note 1 BetterZip MacItBetter √ — x 解压缩 2 2345好压 2345.com — √ 解压缩 3 BlackBerry Blend BlackBerry √ 黑莓文件管理 4 Noizio noiz.io √ — 白噪音 声效 5 OmniFocus The Omni Group √ — x GTD、任务管理 6 Parallels Desktop Parallels √ — x 虚拟机 7 RescueTime √ √ — 时间流水记录 8 Sachesi xsacha √ 黑莓刷机 9 搜狗输入法 搜狗 √ √ 10 易呗背单词 易呗 √ 11 朗读女 阿嘉 √ 语音朗读 12 同步助手 宇通博软件 √ iOS 设备管理 13 有道词典 网易公司 √ 14 Anki Damien Elmes √ 卡片辅助记忆","tags":[{"name":"Windows","slug":"Windows","permalink":"http://yoursite.com/tags/Windows/"},{"name":"Mac","slug":"Mac","permalink":"http://yoursite.com/tags/Mac/"},{"name":"Software","slug":"Software","permalink":"http://yoursite.com/tags/Software/"}]},{"title":"EndNote 与 Markdown 结合 — 为网文快速添加 Reference","date":"2015-08-29T16:00:00.000Z","path":"2015/08/30/EndNote-Markdown/","text":"最近正在学习用 Markdown 写文章，网上搜了一圈，没找到称心的插入参考资料列表 Reference 的方法。想起自己一直在用 EndNote 管理文献，索性网络博文的文献也用 EndNote 管理好了。 参考 Markdown 的语法，修改了 EndNote 文献的导出格式，生成的列表较简洁，样式自定义，排序和维护都比较方便，基本满足了自己的要求。 下面是实现过程，稍作记录供参考，具体细节样式取决于 Markdown 样式配置。 相关程序: EndNote X7 Windows 10 马克飞象 &amp; Mou 导入与配置 配置文件下载：→ EndNote-MOxFIVE.zip 如下图获取 Style Folder 路径然后在资源管理器里打开 → 把下载解压得到的两个 ens 格式拷入其中; 如下图打开样式管理器，找到并勾选新添加的两种样式； 打开 EndNote → Preferences → 导入下载的 Reference Type.xml → 默认 type 选择“1.web” → 点确定退出； 生成列表 如下图，下拉列表切换为 Markdown List 样式，点新建文献按钮，填入作者、标题、日期和链接后保存； 选取添加好的文献，右键选 Copy Formatted，在 Markdown 正文末尾加一个标题，把列表粘贴其下； 1234567### 参考资料:1. ***认识与入门 Markdown*** by **Te_Lee** on &lt;code&gt;2014/04/17&lt;/code&gt;: &lt;http://sspai.com/25137&gt; 1. ***Markdown 语法说明*** by **riku** on &lt;code&gt;2012&lt;/code&gt;: &lt;http://wowubuntu.com/markdown/&gt; 1. ***使用 GitHub 和 Hexo 搭建免费静态 Blog*** by **wsgzao** on &lt;code&gt;2015/03/23&lt;/code&gt;: &lt;https://www.v2ex.com/t/178642&gt; ~~~~~~~~~##### 上面是文章List样式，单一主页的样式先切换到Markdown Homepage再复制; 1. **GitHub**: &lt;https://github.com/MOxFIVE&gt; 效果预览 GitHub: https://github.com/MOxFIVE 认识与入门 Markdown by Te_Lee on 2014/04/17: http://sspai.com/25137 Markdown 语法说明 by riku on 2012: http://wowubuntu.com/markdown/ 使用 GitHub 和 Hexo 搭建免费静态 Blog by wsgzao on 2015/03/23: https://www.v2ex.com/t/178642 更长预览请参看本人另一篇日志的 参考资料列表。 一些取舍 EndNote 里的样式配置尽量使用 Markdown 语法编写，保证对各个 Markdown 编辑器的兼容性； &lt;code&gt;2012&lt;/code&gt;日期这里不用 Markdown 写法，因为有关符号 ` 在 EndNote 中被用于引入变量； 显示完整网址，便于识别来源； 1.的列表写法主要为了便于批量生成以及自由排序，只是某些编辑器可能不兼容这个写法； 原本标题想用书名号《》包起来，但感觉不少内容不应该用书名号，最后还是使用斜体表示标题； 上面预览样式是按我个人喜好配的，需要调整的话可自行琢磨参数修改模板。","tags":[{"name":"EndNote","slug":"EndNote","permalink":"http://yoursite.com/tags/EndNote/"},{"name":"Markdown","slug":"Markdown","permalink":"http://yoursite.com/tags/Markdown/"},{"name":"Reference","slug":"Reference","permalink":"http://yoursite.com/tags/Reference/"}]},{"title":"个人 Web 前端学习路线","date":"2015-08-27T16:00:00.000Z","path":"2015/08/28/Front-End-Study/","text":"前言简单记录个人学习 Web 前端过程中使用的教程和书籍。仅列出较系统和专业化的资料，不包括网上零散的文章和教程。 资源样式：[完成日期]. [教程标题（带链接）] [投入时间]； 资源简介 + 个人学习方式 + 有关配图。 PS: 学习前端前的一些个人相关信息和经验： 非计算机类专业，文科生，编程经验基本为零； 能流畅阅读大部分英文资料； 经常折腾各种系统、软件和手机 APP； 善用利用搜索解决各类问题； 追求“秩序”，喜欢把各种事物变得井井有条。 入门级别 Basic 35h2015-08-10. Codecademy: HTML &amp; CSS 10hLearn how to create websites by structuring and styling your pages with HTML and CSS. 理解所有背景介绍内容，不看提示通过所有测验。 2015-08-31. Codecademy: JavaScript 20hLearn the fundamentals of JavaScript, the programming language of the Web. 理解所有背景介绍内容，不看提示通过所有测验。 2015-11-05. Code School: Try Git 2hLearn how to use Git by reviewing the basic concepts of Git version control. Try out this introductory course that was created with GitHub. 熟悉介绍的基础概念和基本命令 2015-11-11. Codecademy: Make a Website 3h Build a recent version of Airbnb’s home page and learn the fundamentals of web development in the process. 不看提示通过所有测验。 教程里用的是 Bootstrap，是个不错的 CSS 样式集，写页面挺方便，不过我还是更喜欢自己写样式，这个看看源码参考好了。","tags":[{"name":"HTML","slug":"HTML","permalink":"http://yoursite.com/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"},{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}]},{"title":"个人博客站点建设历程","date":"2015-08-19T16:00:00.000Z","path":"2015/08/20/blog-building/","text":"前言本篇日志用于归纳记录自己在学习建设个人博客站点中的各种尝试和思考。 为方便编辑和查看最新进展，更新以倒序方式呈现。 大部分改动最终会同步到 Yelee 主题中，希望主题用户能偶尔查看此日志，按需决定是否更新； 使用上的问题可先查阅文档 《Yelee 主题使用说明》 改动和尝试中参考的主要资源都做了 链接跳转 并在文末列出； [G]: 表示该项的具体修改已 commit 提交到 GitHub，点击即可查看； 2016 年 7 月07-04 目录设置 [G] 调整完善目录设置，方便显示\\隐藏文章序号和限制目录最大级数（层级太多目录区会显得臃肿）。 2016 年 6 月06-30 标签标题切换 [G] 合并 Pull，支持在切换标签页时更改其标题，挺有意思的小功能。 06-27 评论数显示 [G] 可以在主页文章标题旁显示评论数（多说 或 Disqus） 06-25 新标签设置 [G] 完善新标签打开页面的设置，现在可以分别指定哪些类型页面在新标签中打开； [G] 添加几个社交图标（LOFTER, Coding, Quora, bilibili, AcFun, niconico） 06-17 主题文档 [G] 主题发布 v3.5 版本，也终于弄好说明文档了，希望大家能更新，以后有疑问可先查阅文档: 《Yelee 主题使用说明》 06-14 样式调整 [G] 调整部分区域的阴影效果和文字样式； [G] 去掉几张默认背景图。 06-11 ISSUE 模板 [G] 提 issue 前希望能阅读下推荐的短文，总结得挺好的 提问的检查表。 06-08 动态加载评论 [G] 现在可以选择动态加载评论模块，即当点击评论条时才显示评论内容。 06-05 可折叠目录 [G] 多级目录现在可以被展开和收起，方便浏览。同时对目录相关的代码进行了大量优化； [G] 目录不换行时，使用更合理的方式显示标题提示。 06-04 样式优化 [G] 经提醒修复边栏标签云显示溢出的问题； 06-02 图片压缩 [G] 压缩优化主题中的图片。 06-01 头部标签 [G] 补上一些常用的 HTML 头部标签，顺便统一代码缩进风格。 2016 年 5 月05-27 代码优化 [G] 修复未启用 jQuery UI 时搜索功能会失效的问题。 05-26 代码优化 [G] 移动端不再加载多余的 jQuery UI, 首屏加载小了 100k； [G] 修复迷你归档按钮切换问题。以前选择器选得太笼统了； [G] 升级依赖版本。因为不会去兼容 IE6-8，所以 jQuery 直接升到了 2.2.4。 05-25 本地搜索 [G] 添加本地站内搜索功能。配置基本完善，再装个插件就能用，终于不用再折腾各种第三方搜索服务了。 05-23 IE 升级提示 [G] 现在使用 IE6/7/8 访问博客时将跳转的指定的页面； 05-21 主题版本 [G] 配置文件和页脚 Yelee 的提示文字中添加主题版本信息，方便讨论； [G] 补充发布了从 1.0 到 3.0 共五个版本的主题。这么久了还能补上更新日志，多亏了自己明晰的 Commit 记录。 05-19 边栏点击 [G] 修复 PC 端单栏模式下不能点击展开侧边栏的问题，同时边栏使用 flex 布局以兼容 max-width 属性。 05-18 标题风格 [G] 优化标题相关代码，同时添加两种标题风格（Yilia, GitHub），喜欢极简的可以换用。 05-17 图片压缩 添加压缩优化背景图的说明，曾提过一次，但感觉不少用户并没有注意到，索性写了篇 小教程。 05-16 标签底色 [G] 优化标签背景颜色相关代码，同时换用对比度更高的底色。 05-15 IE 升级提示 [G] 主题 IE6/7/8 下样式错乱，不打算兼容了，访问时会直接全屏提示升级浏览器。 05-07 列表样式 [G] 优化列表相关代码，同时新增 12 种列表标记样式。1-3 号标记为 CSS 默认样式，排版兼容性较好；其余通过伪元素控制，兼容性欠佳但样式较灵活。 05-03 社交图标 [G] 新添加 CSDN, 博客园等几个社交图标供选用； 更新主题介绍文档图片链接，HTTPS 链接的图片似乎有点问题。 2016 年 4 月04-27 样式优化 [G] 完善移动端边栏翻译； [G] 调整使用 Hexo 标签插件时引用区样式； [x] [G] [G] 支持通过 - [x] - [ ] 添加复选框任务列表。只是一个临时的前端方案，还是希望相关 markdown 解析器能原生支持； [G] 更新文档图片链接，贴图库感觉不大稳定。 04-24 样式优化 [G] 可在页脚显示网站成立年份； [G] 调整标签云页面样式，同时完善其翻译。 04-20 代码优化 [G] [G] 精简百度分享和社交图标栏代码； [G] [G] 调整页脚和边栏副标题样式； [G] 目录不分行时显示省略号。 04-18 字体修复【重要】 [G] 修复字体搭配失效导致文字黯淡发虚的问题。一个小错误让主题在 Windows 下的显示效果大打折扣； 顺便统一了边栏字体，加粗文章各级标题。 04-17 图标优化 [G] 修复首页首篇文章过长时页面空白的问题； [G] GitHub 更换 SVG 格式图标，既提高了清晰度又避开了之前图标不显示的问题； [G] 调整样式代码，以换用清晰度更高的 logo 图片。 04-15 CDN 加速 [G] [G] [G] Font Awesome、clipboard.js 和 fancyBox 都使用 CDN 引入，精简代码和本地资源，同时加快页面二次加载速度； [G] 主题配置中关联 CDN，方便切换。 04-13 字号调节 [G] 通过 rem 和 Stylus 变量，快速调节字号和缩放页面元素。用了 rem 这个单位，主题大概是真的不支持 IE678 了； [G] 调整移动端文字、标题、行距、边距、版权信息区等样式，布局更紧凑，文字更突出。 04-03 字体优化 [G] 加深默认字体颜色，添加参数调整文本渲染效果； [G] 优化 Font Awesome 图标在 Chrome 等浏览器下的显示效果。 04-02 分享优化 [G] 优化百度分享代码，同时将图标替换为 Font Awesome 字体，看着和谐多了； [G] 添加 AddThis 分享。相比百度，AddThis 默认样式美观不少，而且可以在 HTTPS 站点中使用。 04-01 代码优化 [G] 修复网站位于子目录时 main.js 失效的问题； [G] 当 GitHub.png 不存在时，使用 github.png 作为图标。不少用户更新后 GitHub 图标不显示，虽然可以甩锅给 Git, 还是在主题里做一下兼容好了； [G] 修改文本框文字颜色，相对清晰些； [G] 左边栏设置最大宽度，改善其在平板下的显示效果。 2016 年 3 月03-30 代码高亮 [G] 关掉 Hexo 代码类型检测，手动指定代码语言，避免生成各种奇怪的高亮样式。 03-23 样式调整 [G] 调整页面进度条的默认样式，天蓝色带点阴影； [G] 修复友情链接内容显示不全的问题，同时微调其样式； [G] 主题文档中添加切换语言的说明。 03-21 翻译完善 [G] 完善文末版权区的翻译，同时为了保证切换语言后显示一致，对部分样式进行了调整。 03-20 多语言支持 [G] 主题添加多语言支持（简体中文 | 港澳繁体 | 台湾正体 | 英语），配置中未指定语言时默认使用简体中文。个人语言水平有限，欢迎协助完善翻译； [G] 页面中加入语言声明； [G] 修复 阅读全文 按钮移动端内边距设置无效的问题。 03-19 页面进度条 [G] [G] 合并 Pull, 引入 pace.js, 以便在页面加载时显示进度条。网站访问不够快时，用进度条调剂下也是不错的； [G] 微调目录按钮位置，顺便提取变量，方便调整目录高度。 03-16 代码优化 [G] 把部分与主题配置关联不大的 JavaScript 代码移到单独的 JS 文件中，以减小静态文件体积和提升页面加载速度。原本想把每一个功能做成一个组件，只是用 EJS 模板似乎不够理想，暂时这样吧。 [G] 调整样式，避免友情链接中的标题被换行。 03-13 样式优化 [G] 调整文本框的字体颜色和背景（文本框使用四个空格或者 Tab 缩进）； [G] 当浏览器窗口高度不足时，在左边栏显示垂直滚动条。 03-09 协议自适应 [G] 把原先合并在一起的 RequireJS, jQuery 分离开来，方便更新版本和替换支持 HTTPS 的CDN。出于兼容性考虑，jQuery 沿用原先的 1.9.1 版本； [G] 改为在页面头部引入 jQuery，方便使用； [G] MathJax 的 CDN 也改为相对协议以支持 HTTPS。 03-07 加载优化 [G] 删除多余的社交图标图片，多数图标已使用 Font Awesome 代替； [G] 修复文章显示延迟问题。只有当动画效果开启且位于首页时，才设置文章区默认透明度为 0。调整后文章页近乎 秒开，之前多了个透明度从 0 到 1 的动画过程，易有延迟感。 03-04 代码优化 [G] 调整目录标题 title 属性的获取方式； [G] 修复关闭动画后文章区不显示的问题； [G] 参考 Pull，修复开启 Fancybox 时无法使用 &lt;img&gt; 标签设置图片尺寸和标题的问题。 03-02 配色方案 [G] 调整灰白主题样式，同时转移代码到 Stylus 文件中，更规范且方便编写； [G] 添加 Yilia 配色方案。因为改动地方较分散，因而使用覆盖的方式添加。以后大概会添加几种配色方案，几套标题样式，方便搭配； [G] 增大引用区和文末版权区外边距； [G] 提取变量，方便统一调节标签、按钮和图标的透明度。 03-01 问题修复 [G] 修复表格过宽时溢出窗口的问题； [G] 修复多说 UA 透明度失效问题。 2016 年 2 月02-29 Hexo 更新 [G] 更新 Hexo 到最新版本，解决了目录标题锚点不显示中文的问题。说是更新，其实只是换个文件夹安装了另一个 Hexo，下载插件，然后备份恢复自己改动的文件； [G] 开始使用当前版本的 Yelee 作为自用博客主题，方便调试和同步更新； 暂时关闭搜索功能。因为现在博客只托管在 GitHub，百度站内搜索无法正常抓取。 02-28 子目录设置 [G] 修改主题资源链接，添加对应设置以支持在子目录存放网站。http://yoursite.com/blog；原本以为挺容易，结果修改起来不少坑，配置获取，默认值，地址拼接等都要注意。 02-27 样式调整 [G] 调整标签背景色的生成方法，似乎兼容性好些； [G] 调整头像加载动画实现方式。原先 lazyload 感觉较卡顿，关联较多，兼容性欠佳； 02-23 样式优化 [G] 调整社交图标间距。原先只设置了右边距，左边栏宽度调整后图标区可能不居中。 02-21 样式调整 [G] 调整文章区外边距，避免多说表情框溢出背景。 02-18 代码优化 [G] [G] 合并 Pull，修复滚动条溢出问题；对齐置顶图标；修复社交图标文件名不匹配问题。 02-17 样式优化 [G] 社交图标和文章区域添加轻微阴影效果； [G] 修复改变左边栏宽度后隐藏标签按钮不对齐的问题； [G] 设置变量，方便修改主题背景色和透明度。 02-11 代码优化 [G] 分离 社交图标栏 代码，设置 变量/循环 自动生成相关样式。代码得以精简，以后添加图标和修改样式也比较方便； [G] 平板等触摸屏设备关闭 Tooltip 02-04 样式调整 [G] 增大段间距，改善文章排版效果； [G] 修复部分 subnav 社交图标不能点击跳转的问题。 02-01 代码优化 [G] 合并 Pull , 避免执行无效代码； [G] 修复美化提示框样式后多说无法选择表情的问题； 调整最近访客头像动画效果。 2016 年 1 月01-30 样式调整 [G] 调整正文、按钮等不同区域的 Tooltip 提示框样式。 01-27 设置优化 [G] 添加全局配置，方便 显示/隐藏 文章目录及文末版权信息。如果默认关闭，依然可以在文章头部添加相应参数单独开启。 01-26 样式调整 [G] 整合 GitHub-Repo-Widget.js，同时微调其样式，方便在页面中展示 GitHub 项目； [G] 使用 jQuery UI Tooltip，美化工具提示框样式。试了不少修改方案，没有发现更省心的； [G] 添加简书、SegmentFault、Medium 等8个网站图标，同时稍微简化相关 CSS 代码。 01-21 设置优化 [G] 添加网站计数设置，方便开启/停用计数及修改有关显示文字； [G] 看到不少用户喜欢把左边栏调宽，干脆在配置中提供选项好了，与左边栏宽度相关的元素会自适应调整； [G] 为方便调整左边栏宽度，其中元素全部居中显示。之前下半部分是向左偏移的，似乎这样更顺眼？ 01-19 样式优化 [G] 修复关闭动画后单栏模式中不显示头像的问题； [G] 添加设置，方便在文章前为“自用笔记”分类添加说明文字。 01-18 引用样式 [G] 添加 7 个引用样式； 先逐步完善对局部样式的自定义，再看看怎么结合这些小样式，搭配出几个不同风格主题供选择。 01-17 样式分离 [G] 分离正文中的标题、列表、引用以及表格等模块，方便以后为主题添加和设置自定义样式； CSS 写法我应该是比较熟悉了，所以分离后的样式直接使用更简洁的 Stylus 改写。 01-16 配置文档 [G] 多说还是有不少人因为误解而配置失败，又补充了一些说明，能装上 Hexo 的应该都能理解了吧；之前一直沿用 Yilia 主题的配置，但其实原配置过于简略，也有些许杂乱，这次索性重写了。设置项按功能分类，编写风格保持一致，同时附上一些必要的配置说明。 01-14 站内搜索 [G] 优化百度站内搜索的引入方式，同时透明其背景； 站内搜索似乎是很鸡肋的，除了测试搜索效果外我几乎没怎么用过，记录中也极少看到访客使用搜索。对博主自己而言，如果文章都是原创且设置了完善的分类和标签，我想他一定能很快检索出需要的内容。对访客而言，访问这类小博客通常是通过搜索引擎或者某篇博文链接，直接就查看到了所需内容，无站内搜索需要；如果访客只是偶尔进的主页，那他大概也只是漫无目的地看看归档或者标签，站内搜索依旧被闲置。目前我还保留着搜索功能，基本只是做个展示吧，确实很需要站内搜索的可以参考添加。 01-12 样式控制 [G] 在主页隐藏本篇文章的标签列表；隐藏本篇文章目录中三级标题前的序号。 01-10 文章历史版本 [G] 关联 GitHub 上的文章备份，在文末版权区里添加文章更新历史、修改记录查看和 Markdown 源文件下载功能。感觉这是个很小众的需求，就不把它整合进 Yelee 主题里了，有需要的可以参考相关 commit 和文章添加； [G] 文末版权区小标题样式设置为 inline-block，避免被换行；站外链接改在新标签中打开；改用 break-all 强制换行，以优化长链接显示效果。 经验记录: 《关联 GitHub, 让 Hexo 支持查看文章更新历史》 01-09 兼容性改善 [G] 合并 Pull。1. 调整滚动监听方式，对 Safari 使用特定样式，提升主页动画兼容性；2.直接使用 cssText 设置菜单按钮动画，以兼容 IE 9 以上版本；3.取消 -webkit-box 布局，避免头像在 IE9 + 和 Firefox 中显示错乱；4.优化友言评论移动端样式。 01-08 首页动画 [G] 合并 Pull, 引入 ScrollReveal.js 和 Animate.css，以设置和丰富首页动画效果。动画可在配置中关闭。 01-07 代码优化 [G] JavaScript 变量移至页头，精简代码，同时也方便设置在指定页面中禁用特定功能模块； 添加 文章置顶 功能，同时微调置顶图标边距； 默认关闭 MathJax 数学公式解析，优化无公式显示需求用户的页面加载速度。 01-06 样式调整 修复网易云音乐移动端可能撑破布局的问题，max-width。 01-05 样式自定义 分离部分 CSS 样式模块，便于以后通过主题配置快速切换样式； [G] 添加 9 个文本高亮样式，4 个代码配色方案； 尝试对背景图使用 CSS 模糊滤镜，似乎很影响页面流畅度，原因不详，维持现状。 01-04 按钮优化 [G] 使用 jQuery 重写 目录切换按钮 代码，修复移动端按钮值显示和点击无效问题，同时添加一些动画效果； [G] 添加回调函数，修复迷你归档切换时可能出现的显示问题。 01-03 样式调整 [G] 调整文字选中后的背景和颜色； [G] 修复菜单栏过长会覆盖社交图标的问题； [G] 归档页设置在新标签打开文章链接； 稍微增大引用区内边距。 01-01 评论优化 [G] 添加友言评论；优化评论模块代码与配置；重写评论配置说明。 经验记录: 《为 Hexo 主题添加评论模块 — Disqus, 多说, 友言》 2015 年 12 月12-27 移动端优化 [G] 时间与标题对齐；增大网站小标题内边距；调整日期样式；字体大小调整；页脚布局优化；”隐藏标签”按钮优化; 移动端归档页默认隐藏标签； [G] 在 iPad 和单栏模式中，不加载背景图，改用随机 CSS 背景色，从而提高移动端加载速度，减少背景兼容性问题； [G] 为头像增加动画效果； [G] 调整鼠标悬停时的字粗、字色、背景色等效果。 12-25 样式调整 [G] 社交图片调整为图标悬停时整体放大。 12-24 评论按钮 [G] 取消页面类型判断，改为判断页面内是否存在评论区，不存在则自动隐藏评论跳转按钮。 12-22 跳转按钮 [G] 文章跳转按钮优化，精简代码，优化逻辑，合并 CSS。 12-21 迷你归档 [G] 在左边栏目录区增加一个迷你文章列表，通过旁边中间按钮调出或隐藏。 12-18 目录标题 [G] 可在主题配置中设置 目录标题 不换行。 12-17 规范代码 [G] 修改调整自己在主题中添加的代码，尽量使其符合前端代码规范。 12-13 站长验证 [G] 主题配置中提供选项，方便站长验证。 12-12 目录优化 [G] 正文中没使用 HTML 标题时，自动隐藏目录区。 12-11 样式调整 [G] 微调博客字体及社交图标样式。 [G] 多说 UA 内不换行，移动端隐藏多说评论框背景。 12-06 版权信息 [G] 优化文末版权信息。以词断行；去掉网址鼠标悬停加粗效果，英文慎用悬停加粗，易破坏布局。 12-04 字体调整 [G] 为标题，正文，以及代码区设置不同的英中字体。 经验记录: 《CSS font-family 网页字体使用小结》 12-02 文章摘要 [G] 增加通过 front-matter 自定义文章摘要的功能。 至于自动截取设定字数作为摘要的功能，就不添加到主题了。作为内容生产者的个人博客，应该对自己的文章及其呈现方式多用点心。 12-01 标签云优化 [G] 使用 Hexo 自带参数优化分类列表； [G] 页面中添加分类和标签数统计。 2015 年 11 月11-30 评论跳转 [G] 修复导航按钮中 Disqus 评论跳转问题。 11-28 标签云优化 [G] 调整优化标签云样式。tag 内强制不换行；修改 hover 后样式，避免破坏布局。 11-27 表格换行 [G] 调整表格换行规则，标题行与首列不换行。 11-25 图片居中 [G] 移动端居中显示图片。 11-24 样式调整 [G] 调整无序列表样式。 11-21 代码优化 [G] 将标签云页面代码模块整合到 page.ejs 中； [G] 修复长链接和分类列表换行显示问题； 因为整合 Pull 到主分支前未测试，出现问题后折腾了一会，因而意识到 branch 在协作中的重要性，也顺便熟悉了 Git 增删管理本地和远程分支的方法。 11-19 样式调整 [G] Page 页面中标题的默认样式改为居中，区别于 Post。 11-18 目录显示 [G] 去除 Page 页面中的目录和版权信息，只在 Post 中显示。 11-17 随机背景优化 整合 Pull，优化随机背景代码； [G] 改进背景参数设置，改写说明文档； 11-16 代码框样式 [G] 调整优化代码显示框相关样式。 11-15 图片样式 [G] 改进 fancybox 模块的加载和开关方式。 11-11 文章分类 [G] 修复文章多分类显示问题。 11-09 时间格式 [G] 修复时间格式错误。 11-06 个人 Wiki 使用 TiddlyWiki 为博客增加个人 Wiki。 11-01 样式优化 [G] 调整优化目录样式。 2015 年 10 月10-26 Stylus 原来我写的不是纯粹的 CSS, 而是 Stylus, 这个很称心，学起来。 10-25 地址复制 [G] 增加复制地址等信息到剪贴板的功能。 10-23 主题切换 整合些个人代码，切换博客到自己的主题 Yelee。 10-22 提交主题 [G] 参考 相关文档，顺利提交主题到 官网，415，挺不错; 列出的参考资料越来越少，因为现在看着源码就可以开心地改这改那了。 10-21 社交图标 [G] 重构优化社交图标显示。 10-20 背景图开关 [G] 配置中添加关闭背景图的选项。 10-19 完善主题 [G] 保留原主题多说评论； 完善主题说明文件； 继续转移代码到新主题中。 10-18 发布主题 撰写说明文件，制作配图； 分享主题到 V2EX，见光。 10-17 主题 Yelee 感谢 Git 的版本控制以及自己较详细的 commits 记录，有了这些新主题构建顺畅多了。 10-16 构建主题 [G] 折腾许久，对原主题改动越来越多，应该可以发布个新主题了，在整理代码重新提交时也可以顺便复习巩固所学知识； 等新主题弄好后就把个人博客公开，然后暂时减少折腾，好好看书打基础。 10-15 文章导航 [G] 添加文章导航跳转按钮； [G] 优化不蒜子显示方式。 10-14 多说评论 [G] 优化站长认证方式； [G] 修复多说页面评论重复问题。 10-12 标签云界面 [G] 优化跳转按钮代码； [G] 添加标签云界面。 10-11 跳转按钮 [G] 重构优化跳转按钮代码。 10-10 样式调整 修改 apple-touch-icon 底色； 调整表格等样式。 10-09 图片优化 [G] 添加 apple-touch-icon； 随机背景图减少到5张，过犹不及； 用 Photoshop 尽可能压缩页面图片； [G] 百度站内搜索JS本地化从而设置背景透明。 10-08 Font Awesome [G] 本地化 Font Awesome CSS 图标库以提高页面加载速度，同时优化相关引用代码； 10-07 订阅 [G] 添加博客订阅功能; [G] 调整多说样式； 调整页面样式。 10-06 样式调整 [G] 优化配色主题，修改多说样式，背景透明化； [G] 增加随机背景图功能，使用渐进式 jpg。 [G] 修复跳转按钮显示问题。 10-05 新配色主题 [G] 添加背景图片，设置背景透明度，修改颜色，字体等样式； [G] 透明目录背景，自动隐藏目录之后的元素； 10-04 SEO &amp; 部署 [G] 同时部署博客到 Gitcafe，加速国内访问，便于百度索引； [G] 添加百度站内搜索； 网站提交到数十个搜索引擎供收录，设置robots.txt； [G] 添加、修改社交网站图标; 样式、代码优化; 10-03 搜索 &amp; 页面样式 优化关于我页面; 自定义404页面。 [G] 改用 Swiftype 搜索； 经验记录：《在 Hexo 中创建匹配主题的404页面》 10-02 网站统计 [G] 添加 百度统计 模块; [G] 调整搜索框样式。 10-01 搜索模块 添加网站 sitemap; [G] 添加 微搜索 并设置好搜索框位置及样式。 2015 年 9 月09-30 关于我页面 新建关于我页面; 编写内容并个性化该页面样式 09-29 多说样式 [G] 个性化多说评论样式。 经验记录：《多说样式折腾记录 — 添加 UA 浏览器标识、旋转头像等》 09-28 社会化分享 [G] 使用 百度分享。 09-25 时间格式 [G] 修正时间格式； 09-23 网站计数 更新网站图标 favicon; [G] 使用 不蒜子 增加网页访问统计功能。 09-22 模块化 [G] 长链接强制换行； [G] 修复和加密邮件链接； [G] 学习 模块化 管理代码； 09-21 版权设置 [G] 自定义 日期格式； [G] 增加文末版权信息。 09-20 样式优化 [G] 隐藏的文章前言标题； [G] 修改新建文章模板； [G] 优化表格样式。 09-16 Markdown 表格 研究如何写好和管理 Markdown 表格。 09-15 样式调整 [G] 调整移动端标签按钮样式； 09-14 按钮优化 [G] 文章索引界面增加按钮用于隐藏标签，方便浏览； [G] 按钮文字 切换 。 09-13 样式优化 [G] 修复 iOS 下代码显示不全问题； [G] 个性化标题等样式； [G] 移除 iOS 按钮样式。 09-12 样式调整 [G] 列表背景色调整； [G] 去掉主页按钮，设置通过点击名字或者头像回到主页； 09-11 样式调整 [G] 阅读全文链接避免换行； [G] 背景颜色，字体颜色，鼠标悬浮效果等。 09-10 样式调整 [G] 使移动端导航与PC端效果一致。 09-09 目录优化 [G] 目录固定到左下，“藏”在左边栏里； [G] 调整移动端目录样式。 09-08 样式调整 [G] 修复 reference 隔行变色样式； [G] 随机背景色。 09-07 样式修复 在 Hexo 中 新建页面； [G] 移动端文章导航垂直居中。 09-06 垂直居中 [G] 重构代码，用表格实现链接靠边 垂直居中。 09-05 样式优化 [G] 更顺眼的标记排序； [G] 配色，边距，字体等样式调整。 09-04 样式优化 [G] 修复长标题覆盖日期的问题； [G] 让移动端标题边距更合理; 西文单词与汉字间加空格，便于阅读和分段。 09-03 GitHub 使用 开始使用 issue 功能； 学会在 commit 中 关闭 issue。 09-02 主页跳转 [G] 使移动端也能点击头像回到主页。 09-01 目录优化 [G] 为目录添加 overflow 属性，超过设置高度显示滚动条。 往后博文固定链接只用小写，便于输入，减少404。 2015 年 8 月08-31 Markdown 样式 [G] 参考各种主题个性化自己的 Markdown 样式。 08-30 代码高亮 [G] 替换默认代码高亮主题； [G] 自定义代码高亮样式。 08-29 Markdown 文章优化 改用[文字][链接代码]的语法写 Markdown 文章，减少书写干扰。 08-28 跳转按钮优化 [G] 添加 span 标签使整个按钮区域都能响应点击； [G] 增加 class, 减少重复代码； 使按钮 div 直属于 body，保证可用性。 08-27 按钮移动适配 [G] 添加跳转按钮 CSS 样式，为移动端做适配。 08-26 跳转按钮 [G] 使用 HTML锚点 实现返回底部功能； [G] 返回顶部按钮也改用锚点a href=&quot;#top&quot;实现； 08-25 更新基本信息 [G] 更新友情链接，关于我，边栏菜单等基本信息； 给文章添加标签和分类。 08-24 样式优化 给正文跳转链接增加提示标题，便于明晰去向; [G] 设置参考资料列表 单双行 为不同底色； [G] 修改目录按钮鼠标指针样式便于区分。 08-23 Markdown 文章优化 配置邮箱使代码 commit 确认身份 后显示头像； 链接前后加一个半角空格改善阅读体验； 列出参考资料，并 Markdown 化 Endnote Reference 的导出样式，方便添加到文末。 经验记录：《EndNote 与 Markdown 结合 — 为网文快速添加 Reference》 08-22 返回顶部按钮 [G] 给博客添加 返回顶部 按钮； 学习书写 规范 的 Commit Message。 08-21 目录按钮 [G] 文章页添加 按钮，用于显示或者隐藏文章目录； [G] 简单修改了按钮的 CSS 样式； 发现 Hexo 服务开启时也可以修改配置文件，刷新网页即生效，预览方便多了。 08-20 TOC &amp; Markdown [G] 给博客添加文章目录 Table of Contents； 接触很久了，今天开始正式学习使用 Markdown 写文章。编辑器选了 马克飞象，其默认主题很赞，导出效果也与 Hexo 相近，方便预览。Mou 也不错，备用。 08-19 GitHub Pages 配置 开始在 GitHub Pages 上使用 Hexo 搭建管理博客，这类静态博客比较简洁轻量，不用接触 PHP 和后台数据库，修改方便，更适合正在学习 HTML, CSS 和 JavaScript 的我； [G] 安装使用 Hexo 新主题：Yilia ； [G] 绑定域名到 Pages； [G] 绑定网页评论到自己的 多说 账户。 08-18 GitHub, Pages &amp; Hexo 把主题代码托管到 GitHub，方便版本管理，回顾修改历史； 在 GitHub 上搭建博客，采取 Hexo 框架，在 Windows 下安装配置环境； 搭建这个静态博客又折腾了一晚，主要因为: Mac 下安装意外出错，我又不熟悉 Mac 的文件管理和配置方式，转战 Windows； 各种教程包括官方英文文档省略了不少基础步骤，比如我折腾好一会才知道$ npm install -g hexo-cli是要在 git 安装后打开 git bash 输入，而不是在系统命令提示符里输入； 不知道”$”是表示这个是命令行代码，输代码时并不用输入； 要以管理员身份打开 git bash，之后的代码才能正常运行； 不重视官方文档，网友分享的不少教程命令已经过时了，翻看官方文档修正后才能使用。 08-17 修改主题 [G] 修改代码，使首页默认显示摘要 the_excerpt； 自定义中关闭站点标题，左边栏显示稳定不少； [G] 通过自带小工具 text 添加了个人头像和简介； 尝试各种 配色方案。 08-16 搭建 WordPress 本地环境 为了方便修改主题和预览效果，参考 教程 利用 XAMPP 在 Windows 10 下搭建了 WordPress 本地环境； 先试着在 Mac 上搭建，出错被迫放弃；在 Windows 上顺利搭建，配置也更为丰富，不足就是有时需要以管理员身份启动程序才能运行 Apache。 08-15 试用 WordPress 试了多个主题，决定在官方默认主题 Twenty Fifteen 的基础上，自行添加修改样式。喜欢默认的双栏布局，另外官方代码完善的注释和排版也便于学习和修改； 安装插件 WP User Avatar 解决自定义头像问题； 安装插件 Useso take over Google 改善后台访问速度； 安装插件 W3 Total Cache 改善网站访问速度。 08-14 安装&amp;修复 WordPress 在个人虚拟主机上安装了网站程序 WordPress，但因为瞎折腾，把主机 FTP 文件清空，新安装的 WordPress 不能在线安装主题插件及上传文件，各种搜索无果，把后台密码给了 枫叶主机 的技术员，重新配置安装后得以修复。 08-13 域名解析和绑定 参考 站长网 的一篇文章做好建站准备； 用主机商提供的配置信息绑定和解析了域名。 02-26 购买虚拟主机 在 枫叶主机 购买 Shadowsoscks 代理时看到了推荐的虚拟主机优惠套餐，蒙生了为自己建个站点写东西的想法，之后买了域名和主机。 02-25 注册域名 在 腾讯云域名 选了个便宜，不用备案且后缀顺眼的域名， 个人站点 moxfive.xyz 成功注册！ 参考资料 MOxFIVE Blog: http://moxfive.xyz/ 腾讯云域名: https://domains.qcloud.com/ 枫叶主机: http://www.fyzhuji.com/ 新手站长如何简单搭建一个织梦网站 by 梓轩博客 on 2014/10/21: http://www.admin5.com/article/20141021/567235.shtml WordPress: http://cn.wordpress.org/ WordPress缓存插件W3 Total Cache安装设置方法和缓存加速效果对比 by qi on 2012/10/04: http://www.freehao123.com/wordpress-w3-total-cache/ WordPress 自定义头像插件：WP User Avatar by 倡萌 on 2013/03/26: http://www.wpdaxue.com/wp-user-avatar.html WordPress使用Useso公共库和字体库：Useso take over Google by Bruno on 2014/08/22: http://www.brunoxu.com/useso-take-over-google.html Theme: Twenty Fifteen by WordPress.org on 2015/08/19: https://wordpress.org/themes/twentyfifteen/ WordPress本地环境搭建及安装图文教程 by fnxjkj on 2012/11/23: http://jingyan.baidu.com/article/90bc8fc82098def653640c88.html XAMPP: https://www.apachefriends.org/index.html Error running apache after XAMPP install by CMPS on 2014/01/07: http://stackoverflow.com/questions/24097498/error-running-apache-after-xampp-install 网页设计怎么都不会错的6条配色原则 by 应酷设计 on 2014/08/12: http://www.uisdc.com/6-rules-webdesign-color Code Reference: the_excerpt () by bhlarsen on 2015/06/28: https://developer.wordpress.org/reference/functions/the_excerpt/ GitHub Pages: https://pages.github.com/ Hexo Framework Homepage by Tommy Chen on 2015: https://hexo.io/zh-cn/ 使用GitHub搭建静态博客（Hexo） by 钟白兔 on 2014/04/07: http://segmentfault.com/a/1190000000458953 使用 GitHub 和 Hexo 搭建免费静态 Blog by wsgzao on 2015/03/23: https://www.v2ex.com/t/178642 Hexo-Theme-Yilia by litten on 2015/02/21: https://github.com/litten/hexo-theme-yilia GitHub: https://github.com/MOxFIVE M-Hexo-Blog by MOxFIVE on 2015: https://github.com/MOxFIVE/M-Hexo-Blog WP-Theme-2015 by MOxFIVE on 2015/08/18: https://github.com/MOxFIVE/WP-Theme-2015 多说评论系统: http://duoshuo.com/ 马克飞象: http://www.maxiang.info/ Mou - Markdown editor for developers: http://25.io/mou/ 为Hexo博客添加目录 by 况小琪不卖萌 on 2015/02/09: http://kuangqi.me/tricks/enable-table-of-contents-on-hexo/ 关于点击按钮弹出DIV的相关代码 by 逍遥狂儒 on 2013/08/02: http://is.gd/bD33Ya 用JavaScript实现简单的点击返回顶部效果 by jingangel on 2012/03/08: http://www.cnblogs.com/jingangel/archive/2012/03/08/2385939.html 写出好的 Commit Message by victor on 2014: https://ruby-china.org/topics/15737 Git Commit message conventions by AngularJS on 2015: https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/ Setting your email in Git by GitHub on 2015: https://help.github.com/articles/setting-your-email-in-git/ Endnote: http://endnote.com/ Markdown 语法说明 by riku on 2012: http://wowubuntu.com/markdown/ 认识与入门 Markdown by Te_Lee on 2014/04/17: http://sspai.com/25137 奇偶行显示不同样式操作，CSS3 :nth-child()伪类选择器 by phpok on 2013/03/08: http://blog.phpok.com/archives/202/ 什么是HTML锚点，锚点应该如何用？ by houniaoxiapu on 2014/08/23: http://jingyan.baidu.com/article/8275fc86b79e6446a13cf66b.html JS点击按钮到页面最底部/返回页面顶部代码 by 科e互联 on 2014/12/12: http://www.internetke.com/tutorial/js/2014/1212/1005.html Hexo的私人订制 by Sunny on 2014/03/07: http://blog.sunnyxx.com/2014/03/07/hexo_customize/#定制代码样式 Closing issues via commit messages by GitHub on 2015: https://help.github.com/articles/closing-issues-via-commit-messages/ 6 Methods For Vertical Centering With CSS by S. Bradley on 2011/07/14: http://vanseodesign.com/css/vertical-centering hexo你的博客 by 不如 on 2013/11/22: http://ibruce.info/2013/11/22/hexo-your-blog/ 你所不知的 CSS ::before 和 ::after 伪元素用法 by Dimpurr Cheny on 2013/10/18: http://justcoding.iteye.com/blog/2032627 去掉超链接或按钮点击时出现的虚线边框 by WEB开发者 on 2012/08/10: http://www.admin10000.com/document/725.html Documentation: Format by Moment.js on 2015: http://momentjs.com/docs/#/displaying/format/ 不蒜子: 搞定你的网站计数 by 不如 on 2015/4/4: http://ibruce.info/2015/04/04/busuanzi/ 百度分享: http://share.baidu.com 微搜索: http://tinysou.com/ 百度统计: http://tongji.baidu.com/ Swiftype: https://swiftype.com/ 同时将博客部署在GitHub和Gitcafe上，并通过DNSPOD分流 by PPTing on 2015/02/08: http://ppting.me/2015/02/08/gitcafe/ 百度站内搜索: http://zn.baidu.com Gitcafe: https://gitcafe.com/ 国内外各大免费搜索引擎、导航网址提交入口 by 卢松松 on 2015/09/22: http://tool.lusongsong.com/addurl.html TiddlyWiki: http://tiddlywiki.com/ 解决Hexo置顶问题 by Netcan on 2015/11/22: http://www.netcan666.com/2015/11/22/解决Hexo置顶问题/ ScrollReveal.js: https://scrollrevealjs.org/ Animate.css: http://daneden.github.io/animate.css/ Commit message 和 Change log 编写指南 by 阮一峰 on 2016/1/6: http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html","tags":[{"name":"HTML","slug":"HTML","permalink":"http://yoursite.com/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"},{"name":"Markdown","slug":"Markdown","permalink":"http://yoursite.com/tags/Markdown/"},{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","permalink":"http://yoursite.com/tags/GitHub/"},{"name":"jQuery","slug":"jQuery","permalink":"http://yoursite.com/tags/jQuery/"},{"name":"WordPress","slug":"WordPress","permalink":"http://yoursite.com/tags/WordPress/"}]},{"title":"Hello World","date":"2015-08-18T16:00:00.000Z","path":"2015/08/19/2015-08-19.hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.$$ x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$ Quick Start Create a new post img[alt=\"111\"] { width: 300px; float: right ; clear: right ; } 1$ hexo new \"My New Post\" More info: Writing [x] All [ ] is [x] Well [ ] ! Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment 12345678.article-entry pre, code font-family: font-mono code background: color-background text-shadow: 0 1px #fff padding: 0 0.3em pre http://veryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryv A B 1 This is a sample.http://veryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryveryv 2 This is a sample. 1tcpsumblock = (char *)malloc (packetSize * sizeof (char)); 123class Test&#123; void Test()&#123;&#125;&#125;","tags":[]}]